/*
Beckn Protocol Registry Infrastructure API

This document contains the API specification for the Registry infrastructure of a beckn-enabled network. The Registry API forms the trust layer of beckn protocol. When implemented, they enable creation of an infrastructure that allow trusted transactions between network participants to take place by means of digital signature authentication. The core infrastructure is called the Network Registry or simply, Registry. Any network participant that is listed on the registry can be assumed to have successfully passed the certfication and compliance process of the network, and hence be trusted to transact with.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registry

import (
	"encoding/json"
	"time"
)

// checks if the Subscribe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscribe{}

// Subscribe struct for Subscribe
type Subscribe struct {
	// A globally unique identifier of the platform, Typically it is the fully qualified domain name (FQDN) of the platform.
	SubscriberId *string `json:"subscriber_id,omitempty"`
	// The callback URL of the Subscriber. This should necessarily contain the same domain name as set in `subscriber_id``.
	Url *string `json:"url,omitempty"`
	// The role of subscriber on the network
	Type *string `json:"type,omitempty"`
	// Operating industry domain that this subscriber offers its products or services in. A single subscriber can operate in multiple domains. Each operating domain must have a unique subscriber object entry in the req
	Domain interface{} `json:"domain,omitempty"`
	// The region of operation of this subscriber
	Location *Location `json:"location,omitempty"`
	// A unique ID of the subscription entry in a registry.
	KeyId *string `json:"key_id,omitempty"`
	// The signing public key of the subscriber
	SigningPublicKey *string `json:"signing_public_key,omitempty"`
	// The encryption public key of the subscriber
	EncrPublicKey *string `json:"encr_public_key,omitempty"`
	// Date-time which the signing and encryption keys are valid from
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// Time till which the signing and encryption keys are valid
	ValidUntil *time.Time `json:"valid_until,omitempty"`
	// Status of the subscription
	Status *string `json:"status,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	// A randomly generated uuid nonce value
	Nonce *string `json:"nonce,omitempty"`
}

// NewSubscribe instantiates a new Subscribe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribe() *Subscribe {
	this := Subscribe{}
	return &this
}

// NewSubscribeWithDefaults instantiates a new Subscribe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribeWithDefaults() *Subscribe {
	this := Subscribe{}
	return &this
}

// GetSubscriberId returns the SubscriberId field value if set, zero value otherwise.
func (o *Subscribe) GetSubscriberId() string {
	if o == nil || IsNil(o.SubscriberId) {
		var ret string
		return ret
	}
	return *o.SubscriberId
}

// GetSubscriberIdOk returns a tuple with the SubscriberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetSubscriberIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriberId) {
		return nil, false
	}
	return o.SubscriberId, true
}

// HasSubscriberId returns a boolean if a field has been set.
func (o *Subscribe) HasSubscriberId() bool {
	if o != nil && !IsNil(o.SubscriberId) {
		return true
	}

	return false
}

// SetSubscriberId gets a reference to the given string and assigns it to the SubscriberId field.
func (o *Subscribe) SetSubscriberId(v string) {
	o.SubscriberId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Subscribe) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Subscribe) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Subscribe) SetUrl(v string) {
	o.Url = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Subscribe) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Subscribe) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Subscribe) SetType(v string) {
	o.Type = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Subscribe) GetDomain() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscribe) GetDomainOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return &o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Subscribe) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given interface{} and assigns it to the Domain field.
func (o *Subscribe) SetDomain(v interface{}) {
	o.Domain = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Subscribe) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Subscribe) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *Subscribe) SetLocation(v Location) {
	o.Location = &v
}

// GetKeyId returns the KeyId field value if set, zero value otherwise.
func (o *Subscribe) GetKeyId() string {
	if o == nil || IsNil(o.KeyId) {
		var ret string
		return ret
	}
	return *o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.KeyId) {
		return nil, false
	}
	return o.KeyId, true
}

// HasKeyId returns a boolean if a field has been set.
func (o *Subscribe) HasKeyId() bool {
	if o != nil && !IsNil(o.KeyId) {
		return true
	}

	return false
}

// SetKeyId gets a reference to the given string and assigns it to the KeyId field.
func (o *Subscribe) SetKeyId(v string) {
	o.KeyId = &v
}

// GetSigningPublicKey returns the SigningPublicKey field value if set, zero value otherwise.
func (o *Subscribe) GetSigningPublicKey() string {
	if o == nil || IsNil(o.SigningPublicKey) {
		var ret string
		return ret
	}
	return *o.SigningPublicKey
}

// GetSigningPublicKeyOk returns a tuple with the SigningPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetSigningPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SigningPublicKey) {
		return nil, false
	}
	return o.SigningPublicKey, true
}

// HasSigningPublicKey returns a boolean if a field has been set.
func (o *Subscribe) HasSigningPublicKey() bool {
	if o != nil && !IsNil(o.SigningPublicKey) {
		return true
	}

	return false
}

// SetSigningPublicKey gets a reference to the given string and assigns it to the SigningPublicKey field.
func (o *Subscribe) SetSigningPublicKey(v string) {
	o.SigningPublicKey = &v
}

// GetEncrPublicKey returns the EncrPublicKey field value if set, zero value otherwise.
func (o *Subscribe) GetEncrPublicKey() string {
	if o == nil || IsNil(o.EncrPublicKey) {
		var ret string
		return ret
	}
	return *o.EncrPublicKey
}

// GetEncrPublicKeyOk returns a tuple with the EncrPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetEncrPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EncrPublicKey) {
		return nil, false
	}
	return o.EncrPublicKey, true
}

// HasEncrPublicKey returns a boolean if a field has been set.
func (o *Subscribe) HasEncrPublicKey() bool {
	if o != nil && !IsNil(o.EncrPublicKey) {
		return true
	}

	return false
}

// SetEncrPublicKey gets a reference to the given string and assigns it to the EncrPublicKey field.
func (o *Subscribe) SetEncrPublicKey(v string) {
	o.EncrPublicKey = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *Subscribe) GetValidFrom() time.Time {
	if o == nil || IsNil(o.ValidFrom) {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetValidFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *Subscribe) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *Subscribe) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise.
func (o *Subscribe) GetValidUntil() time.Time {
	if o == nil || IsNil(o.ValidUntil) {
		var ret time.Time
		return ret
	}
	return *o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetValidUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidUntil) {
		return nil, false
	}
	return o.ValidUntil, true
}

// HasValidUntil returns a boolean if a field has been set.
func (o *Subscribe) HasValidUntil() bool {
	if o != nil && !IsNil(o.ValidUntil) {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given time.Time and assigns it to the ValidUntil field.
func (o *Subscribe) SetValidUntil(v time.Time) {
	o.ValidUntil = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Subscribe) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Subscribe) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Subscribe) SetStatus(v string) {
	o.Status = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Subscribe) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Subscribe) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Subscribe) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Subscribe) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Subscribe) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Subscribe) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *Subscribe) GetNonce() string {
	if o == nil || IsNil(o.Nonce) {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscribe) GetNonceOk() (*string, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *Subscribe) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *Subscribe) SetNonce(v string) {
	o.Nonce = &v
}

func (o Subscribe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscribe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubscriberId) {
		toSerialize["subscriber_id"] = o.SubscriberId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.KeyId) {
		toSerialize["key_id"] = o.KeyId
	}
	if !IsNil(o.SigningPublicKey) {
		toSerialize["signing_public_key"] = o.SigningPublicKey
	}
	if !IsNil(o.EncrPublicKey) {
		toSerialize["encr_public_key"] = o.EncrPublicKey
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if !IsNil(o.ValidUntil) {
		toSerialize["valid_until"] = o.ValidUntil
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	return toSerialize, nil
}

type NullableSubscribe struct {
	value *Subscribe
	isSet bool
}

func (v NullableSubscribe) Get() *Subscribe {
	return v.value
}

func (v *NullableSubscribe) Set(val *Subscribe) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribe) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribe(val *Subscribe) *NullableSubscribe {
	return &NullableSubscribe{value: val, isSet: true}
}

func (v NullableSubscribe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


