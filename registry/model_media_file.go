/*
Beckn Protocol Registry Infrastructure API

This document contains the API specification for the Registry infrastructure of a beckn-enabled network. The Registry API forms the trust layer of beckn protocol. When implemented, they enable creation of an infrastructure that allow trusted transactions between network participants to take place by means of digital signature authentication. The core infrastructure is called the Network Registry or simply, Registry. Any network participant that is listed on the registry can be assumed to have successfully passed the certfication and compliance process of the network, and hence be trusted to transact with.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registry

import (
	"encoding/json"
)

// checks if the MediaFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaFile{}

// MediaFile This object contains a url to a media file.
type MediaFile struct {
	// indicates the nature and format of the document, file, or assortment of bytes. MIME types are defined and standardized in IETF's RFC 6838
	Mimetype *string `json:"mimetype,omitempty"`
	// The URL of the file
	Url *string `json:"url,omitempty"`
	// The digital signature of the file signed by the sender
	Signature *string `json:"signature,omitempty"`
	// The signing algorithm used by the sender
	Dsa *string `json:"dsa,omitempty"`
}

// NewMediaFile instantiates a new MediaFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaFile() *MediaFile {
	this := MediaFile{}
	return &this
}

// NewMediaFileWithDefaults instantiates a new MediaFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaFileWithDefaults() *MediaFile {
	this := MediaFile{}
	return &this
}

// GetMimetype returns the Mimetype field value if set, zero value otherwise.
func (o *MediaFile) GetMimetype() string {
	if o == nil || IsNil(o.Mimetype) {
		var ret string
		return ret
	}
	return *o.Mimetype
}

// GetMimetypeOk returns a tuple with the Mimetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetMimetypeOk() (*string, bool) {
	if o == nil || IsNil(o.Mimetype) {
		return nil, false
	}
	return o.Mimetype, true
}

// HasMimetype returns a boolean if a field has been set.
func (o *MediaFile) HasMimetype() bool {
	if o != nil && !IsNil(o.Mimetype) {
		return true
	}

	return false
}

// SetMimetype gets a reference to the given string and assigns it to the Mimetype field.
func (o *MediaFile) SetMimetype(v string) {
	o.Mimetype = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *MediaFile) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *MediaFile) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *MediaFile) SetUrl(v string) {
	o.Url = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *MediaFile) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *MediaFile) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *MediaFile) SetSignature(v string) {
	o.Signature = &v
}

// GetDsa returns the Dsa field value if set, zero value otherwise.
func (o *MediaFile) GetDsa() string {
	if o == nil || IsNil(o.Dsa) {
		var ret string
		return ret
	}
	return *o.Dsa
}

// GetDsaOk returns a tuple with the Dsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetDsaOk() (*string, bool) {
	if o == nil || IsNil(o.Dsa) {
		return nil, false
	}
	return o.Dsa, true
}

// HasDsa returns a boolean if a field has been set.
func (o *MediaFile) HasDsa() bool {
	if o != nil && !IsNil(o.Dsa) {
		return true
	}

	return false
}

// SetDsa gets a reference to the given string and assigns it to the Dsa field.
func (o *MediaFile) SetDsa(v string) {
	o.Dsa = &v
}

func (o MediaFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mimetype) {
		toSerialize["mimetype"] = o.Mimetype
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Dsa) {
		toSerialize["dsa"] = o.Dsa
	}
	return toSerialize, nil
}

type NullableMediaFile struct {
	value *MediaFile
	isSet bool
}

func (v NullableMediaFile) Get() *MediaFile {
	return v.value
}

func (v *NullableMediaFile) Set(val *MediaFile) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaFile) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaFile(val *MediaFile) *NullableMediaFile {
	return &NullableMediaFile{value: val, isSet: true}
}

func (v NullableMediaFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


