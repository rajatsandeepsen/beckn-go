/*
Beckn Protocol Registry Infrastructure API

This document contains the API specification for the Registry infrastructure of a beckn-enabled network. The Registry API forms the trust layer of beckn protocol. When implemented, they enable creation of an infrastructure that allow trusted transactions between network participants to take place by means of digital signature authentication. The core infrastructure is called the Network Registry or simply, Registry. Any network participant that is listed on the registry can be assumed to have successfully passed the certfication and compliance process of the network, and hence be trusted to transact with.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registry

import (
	"encoding/json"
)

// checks if the Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Location{}

// Location The physical location of something
type Location struct {
	Id *string `json:"id,omitempty"`
	Descriptor *Descriptor `json:"descriptor,omitempty"`
	// The url to the map of the location. This can be a globally recognized map url or the one specified by the network policy.
	MapUrl *string `json:"map_url,omitempty"`
	// The GPS co-ordinates of this location.
	Gps *string `json:"gps,omitempty" validate:"regexp=^[-+]?([1-8]?\\\\d(\\\\.\\\\d+)?|90(\\\\.0+)?),\\\\s*[-+]?(180(\\\\.0+)?|((1[0-7]\\\\d)|([1-9]?\\\\d))(\\\\.\\\\d+)?)$"`
	// The address of this location.
	Address *string `json:"address,omitempty"`
	// The city this location is, or is located within
	City *City `json:"city,omitempty"`
	// The state this location is, or is located within
	District *string `json:"district,omitempty"`
	// The state this location is, or is located within
	State *State `json:"state,omitempty"`
	// The country this location is, or is located within
	Country *Country `json:"country,omitempty"`
	AreaCode *string `json:"area_code,omitempty"`
	Circle *Circle `json:"circle,omitempty"`
	// The boundary polygon of this location
	Polygon *string `json:"polygon,omitempty"`
	// The three dimensional region describing this location
	Var3dspace *string `json:"3dspace,omitempty"`
	// The rating of this location
	Rating *string `json:"rating,omitempty"`
}

// NewLocation instantiates a new Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocation() *Location {
	this := Location{}
	return &this
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Location) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Location) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Location) SetId(v string) {
	o.Id = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *Location) GetDescriptor() Descriptor {
	if o == nil || IsNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *Location) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *Location) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

// GetMapUrl returns the MapUrl field value if set, zero value otherwise.
func (o *Location) GetMapUrl() string {
	if o == nil || IsNil(o.MapUrl) {
		var ret string
		return ret
	}
	return *o.MapUrl
}

// GetMapUrlOk returns a tuple with the MapUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetMapUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MapUrl) {
		return nil, false
	}
	return o.MapUrl, true
}

// HasMapUrl returns a boolean if a field has been set.
func (o *Location) HasMapUrl() bool {
	if o != nil && !IsNil(o.MapUrl) {
		return true
	}

	return false
}

// SetMapUrl gets a reference to the given string and assigns it to the MapUrl field.
func (o *Location) SetMapUrl(v string) {
	o.MapUrl = &v
}

// GetGps returns the Gps field value if set, zero value otherwise.
func (o *Location) GetGps() string {
	if o == nil || IsNil(o.Gps) {
		var ret string
		return ret
	}
	return *o.Gps
}

// GetGpsOk returns a tuple with the Gps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetGpsOk() (*string, bool) {
	if o == nil || IsNil(o.Gps) {
		return nil, false
	}
	return o.Gps, true
}

// HasGps returns a boolean if a field has been set.
func (o *Location) HasGps() bool {
	if o != nil && !IsNil(o.Gps) {
		return true
	}

	return false
}

// SetGps gets a reference to the given string and assigns it to the Gps field.
func (o *Location) SetGps(v string) {
	o.Gps = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Location) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Location) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Location) SetAddress(v string) {
	o.Address = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Location) GetCity() City {
	if o == nil || IsNil(o.City) {
		var ret City
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetCityOk() (*City, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Location) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given City and assigns it to the City field.
func (o *Location) SetCity(v City) {
	o.City = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *Location) GetDistrict() string {
	if o == nil || IsNil(o.District) {
		var ret string
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetDistrictOk() (*string, bool) {
	if o == nil || IsNil(o.District) {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *Location) HasDistrict() bool {
	if o != nil && !IsNil(o.District) {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given string and assigns it to the District field.
func (o *Location) SetDistrict(v string) {
	o.District = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Location) GetState() State {
	if o == nil || IsNil(o.State) {
		var ret State
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetStateOk() (*State, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Location) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given State and assigns it to the State field.
func (o *Location) SetState(v State) {
	o.State = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Location) GetCountry() Country {
	if o == nil || IsNil(o.Country) {
		var ret Country
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetCountryOk() (*Country, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Location) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given Country and assigns it to the Country field.
func (o *Location) SetCountry(v Country) {
	o.Country = &v
}

// GetAreaCode returns the AreaCode field value if set, zero value otherwise.
func (o *Location) GetAreaCode() string {
	if o == nil || IsNil(o.AreaCode) {
		var ret string
		return ret
	}
	return *o.AreaCode
}

// GetAreaCodeOk returns a tuple with the AreaCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetAreaCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AreaCode) {
		return nil, false
	}
	return o.AreaCode, true
}

// HasAreaCode returns a boolean if a field has been set.
func (o *Location) HasAreaCode() bool {
	if o != nil && !IsNil(o.AreaCode) {
		return true
	}

	return false
}

// SetAreaCode gets a reference to the given string and assigns it to the AreaCode field.
func (o *Location) SetAreaCode(v string) {
	o.AreaCode = &v
}

// GetCircle returns the Circle field value if set, zero value otherwise.
func (o *Location) GetCircle() Circle {
	if o == nil || IsNil(o.Circle) {
		var ret Circle
		return ret
	}
	return *o.Circle
}

// GetCircleOk returns a tuple with the Circle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetCircleOk() (*Circle, bool) {
	if o == nil || IsNil(o.Circle) {
		return nil, false
	}
	return o.Circle, true
}

// HasCircle returns a boolean if a field has been set.
func (o *Location) HasCircle() bool {
	if o != nil && !IsNil(o.Circle) {
		return true
	}

	return false
}

// SetCircle gets a reference to the given Circle and assigns it to the Circle field.
func (o *Location) SetCircle(v Circle) {
	o.Circle = &v
}

// GetPolygon returns the Polygon field value if set, zero value otherwise.
func (o *Location) GetPolygon() string {
	if o == nil || IsNil(o.Polygon) {
		var ret string
		return ret
	}
	return *o.Polygon
}

// GetPolygonOk returns a tuple with the Polygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetPolygonOk() (*string, bool) {
	if o == nil || IsNil(o.Polygon) {
		return nil, false
	}
	return o.Polygon, true
}

// HasPolygon returns a boolean if a field has been set.
func (o *Location) HasPolygon() bool {
	if o != nil && !IsNil(o.Polygon) {
		return true
	}

	return false
}

// SetPolygon gets a reference to the given string and assigns it to the Polygon field.
func (o *Location) SetPolygon(v string) {
	o.Polygon = &v
}

// GetVar3dspace returns the Var3dspace field value if set, zero value otherwise.
func (o *Location) GetVar3dspace() string {
	if o == nil || IsNil(o.Var3dspace) {
		var ret string
		return ret
	}
	return *o.Var3dspace
}

// GetVar3dspaceOk returns a tuple with the Var3dspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetVar3dspaceOk() (*string, bool) {
	if o == nil || IsNil(o.Var3dspace) {
		return nil, false
	}
	return o.Var3dspace, true
}

// HasVar3dspace returns a boolean if a field has been set.
func (o *Location) HasVar3dspace() bool {
	if o != nil && !IsNil(o.Var3dspace) {
		return true
	}

	return false
}

// SetVar3dspace gets a reference to the given string and assigns it to the Var3dspace field.
func (o *Location) SetVar3dspace(v string) {
	o.Var3dspace = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *Location) GetRating() string {
	if o == nil || IsNil(o.Rating) {
		var ret string
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetRatingOk() (*string, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *Location) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given string and assigns it to the Rating field.
func (o *Location) SetRating(v string) {
	o.Rating = &v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !IsNil(o.MapUrl) {
		toSerialize["map_url"] = o.MapUrl
	}
	if !IsNil(o.Gps) {
		toSerialize["gps"] = o.Gps
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.District) {
		toSerialize["district"] = o.District
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.AreaCode) {
		toSerialize["area_code"] = o.AreaCode
	}
	if !IsNil(o.Circle) {
		toSerialize["circle"] = o.Circle
	}
	if !IsNil(o.Polygon) {
		toSerialize["polygon"] = o.Polygon
	}
	if !IsNil(o.Var3dspace) {
		toSerialize["3dspace"] = o.Var3dspace
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	return toSerialize, nil
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


