/*
Beckn Protocol Registry Infrastructure API

This document contains the API specification for the Registry infrastructure of a beckn-enabled network. The Registry API forms the trust layer of beckn protocol. When implemented, they enable creation of an infrastructure that allow trusted transactions between network participants to take place by means of digital signature authentication. The core infrastructure is called the Network Registry or simply, Registry. Any network participant that is listed on the registry can be assumed to have successfully passed the certfication and compliance process of the network, and hence be trusted to transact with.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registry

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnSubscribe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnSubscribe{}

// OnSubscribe struct for OnSubscribe
type OnSubscribe struct {
	// The current status of the Registrant
	Status *string `json:"status,omitempty"`
	// A random string generated by the registry encrypted with the subscriber's encryption public key
	Challenge string `json:"challenge"`
}

type _OnSubscribe OnSubscribe

// NewOnSubscribe instantiates a new OnSubscribe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnSubscribe(challenge string) *OnSubscribe {
	this := OnSubscribe{}
	this.Challenge = challenge
	return &this
}

// NewOnSubscribeWithDefaults instantiates a new OnSubscribe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnSubscribeWithDefaults() *OnSubscribe {
	this := OnSubscribe{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OnSubscribe) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnSubscribe) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OnSubscribe) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OnSubscribe) SetStatus(v string) {
	o.Status = &v
}

// GetChallenge returns the Challenge field value
func (o *OnSubscribe) GetChallenge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value
// and a boolean to check if the value has been set.
func (o *OnSubscribe) GetChallengeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Challenge, true
}

// SetChallenge sets field value
func (o *OnSubscribe) SetChallenge(v string) {
	o.Challenge = v
}

func (o OnSubscribe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnSubscribe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["challenge"] = o.Challenge
	return toSerialize, nil
}

func (o *OnSubscribe) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"challenge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnSubscribe := _OnSubscribe{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnSubscribe)

	if err != nil {
		return err
	}

	*o = OnSubscribe(varOnSubscribe)

	return err
}

type NullableOnSubscribe struct {
	value *OnSubscribe
	isSet bool
}

func (v NullableOnSubscribe) Get() *OnSubscribe {
	return v.value
}

func (v *NullableOnSubscribe) Set(val *OnSubscribe) {
	v.value = val
	v.isSet = true
}

func (v NullableOnSubscribe) IsSet() bool {
	return v.isSet
}

func (v *NullableOnSubscribe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnSubscribe(val *OnSubscribe) *NullableOnSubscribe {
	return &NullableOnSubscribe{value: val, isSet: true}
}

func (v NullableOnSubscribe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnSubscribe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


