/*
Beckn Protocol Meta API

This document contains all the meta API endpoints that are implemented by the network participants. The information returned from these endpoints typically contain cacheable information.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meta

import (
	"encoding/json"
	"fmt"
)

// RatingCategory Category of the entity being rated
type RatingCategory string

// List of rating_category
const (
	ITEM RatingCategory = "Item"
	ORDER RatingCategory = "Order"
	FULFILLMENT RatingCategory = "Fulfillment"
	PROVIDER RatingCategory = "Provider"
	AGENT RatingCategory = "Agent"
	SUPPORT RatingCategory = "Support"
)

// All allowed values of RatingCategory enum
var AllowedRatingCategoryEnumValues = []RatingCategory{
	"Item",
	"Order",
	"Fulfillment",
	"Provider",
	"Agent",
	"Support",
}

func (v *RatingCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RatingCategory(value)
	for _, existing := range AllowedRatingCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RatingCategory", value)
}

// NewRatingCategoryFromValue returns a pointer to a valid RatingCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRatingCategoryFromValue(v string) (*RatingCategory, error) {
	ev := RatingCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RatingCategory: valid values are %v", v, AllowedRatingCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RatingCategory) IsValid() bool {
	for _, existing := range AllowedRatingCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rating_category value
func (v RatingCategory) Ptr() *RatingCategory {
	return &v
}

type NullableRatingCategory struct {
	value *RatingCategory
	isSet bool
}

func (v NullableRatingCategory) Get() *RatingCategory {
	return v.value
}

func (v *NullableRatingCategory) Set(val *RatingCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableRatingCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableRatingCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatingCategory(val *RatingCategory) *NullableRatingCategory {
	return &NullableRatingCategory{value: val, isSet: true}
}

func (v NullableRatingCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatingCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

