/*
Beckn Protocol Meta API

This document contains all the meta API endpoints that are implemented by the network participants. The information returned from these endpoints typically contain cacheable information.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meta

import (
	"encoding/json"
)

// checks if the DescriptorAdditionalDesc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescriptorAdditionalDesc{}

// DescriptorAdditionalDesc struct for DescriptorAdditionalDesc
type DescriptorAdditionalDesc struct {
	Url *string `json:"url,omitempty"`
	ContentType *string `json:"content_type,omitempty"`
}

// NewDescriptorAdditionalDesc instantiates a new DescriptorAdditionalDesc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescriptorAdditionalDesc() *DescriptorAdditionalDesc {
	this := DescriptorAdditionalDesc{}
	return &this
}

// NewDescriptorAdditionalDescWithDefaults instantiates a new DescriptorAdditionalDesc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptorAdditionalDescWithDefaults() *DescriptorAdditionalDesc {
	this := DescriptorAdditionalDesc{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DescriptorAdditionalDesc) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescriptorAdditionalDesc) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DescriptorAdditionalDesc) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DescriptorAdditionalDesc) SetUrl(v string) {
	o.Url = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *DescriptorAdditionalDesc) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescriptorAdditionalDesc) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *DescriptorAdditionalDesc) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *DescriptorAdditionalDesc) SetContentType(v string) {
	o.ContentType = &v
}

func (o DescriptorAdditionalDesc) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescriptorAdditionalDesc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	return toSerialize, nil
}

type NullableDescriptorAdditionalDesc struct {
	value *DescriptorAdditionalDesc
	isSet bool
}

func (v NullableDescriptorAdditionalDesc) Get() *DescriptorAdditionalDesc {
	return v.value
}

func (v *NullableDescriptorAdditionalDesc) Set(val *DescriptorAdditionalDesc) {
	v.value = val
	v.isSet = true
}

func (v NullableDescriptorAdditionalDesc) IsSet() bool {
	return v.isSet
}

func (v *NullableDescriptorAdditionalDesc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescriptorAdditionalDesc(val *DescriptorAdditionalDesc) *NullableDescriptorAdditionalDesc {
	return &NullableDescriptorAdditionalDesc{value: val, isSet: true}
}

func (v NullableDescriptorAdditionalDesc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescriptorAdditionalDesc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


