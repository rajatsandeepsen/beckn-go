/*
Beckn Protocol Meta API

This document contains all the meta API endpoints that are implemented by the network participants. The information returned from these endpoints typically contain cacheable information.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meta

import (
	"encoding/json"
)

// checks if the Circle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Circle{}

// Circle Describes a circular region of a specified radius centered at a specified GPS coordinate.
type Circle struct {
	// Describes a GPS coordinate
	Gps *string `json:"gps,omitempty" validate:"regexp=^[-+]?([1-8]?\\\\d(\\\\.\\\\d+)?|90(\\\\.0+)?),\\\\s*[-+]?(180(\\\\.0+)?|((1[0-7]\\\\d)|([1-9]?\\\\d))(\\\\.\\\\d+)?)$"`
	Radius *Scalar `json:"radius,omitempty"`
}

// NewCircle instantiates a new Circle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCircle() *Circle {
	this := Circle{}
	return &this
}

// NewCircleWithDefaults instantiates a new Circle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCircleWithDefaults() *Circle {
	this := Circle{}
	return &this
}

// GetGps returns the Gps field value if set, zero value otherwise.
func (o *Circle) GetGps() string {
	if o == nil || IsNil(o.Gps) {
		var ret string
		return ret
	}
	return *o.Gps
}

// GetGpsOk returns a tuple with the Gps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetGpsOk() (*string, bool) {
	if o == nil || IsNil(o.Gps) {
		return nil, false
	}
	return o.Gps, true
}

// HasGps returns a boolean if a field has been set.
func (o *Circle) HasGps() bool {
	if o != nil && !IsNil(o.Gps) {
		return true
	}

	return false
}

// SetGps gets a reference to the given string and assigns it to the Gps field.
func (o *Circle) SetGps(v string) {
	o.Gps = &v
}

// GetRadius returns the Radius field value if set, zero value otherwise.
func (o *Circle) GetRadius() Scalar {
	if o == nil || IsNil(o.Radius) {
		var ret Scalar
		return ret
	}
	return *o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetRadiusOk() (*Scalar, bool) {
	if o == nil || IsNil(o.Radius) {
		return nil, false
	}
	return o.Radius, true
}

// HasRadius returns a boolean if a field has been set.
func (o *Circle) HasRadius() bool {
	if o != nil && !IsNil(o.Radius) {
		return true
	}

	return false
}

// SetRadius gets a reference to the given Scalar and assigns it to the Radius field.
func (o *Circle) SetRadius(v Scalar) {
	o.Radius = &v
}

func (o Circle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Circle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gps) {
		toSerialize["gps"] = o.Gps
	}
	if !IsNil(o.Radius) {
		toSerialize["radius"] = o.Radius
	}
	return toSerialize, nil
}

type NullableCircle struct {
	value *Circle
	isSet bool
}

func (v NullableCircle) Get() *Circle {
	return v.value
}

func (v *NullableCircle) Set(val *Circle) {
	v.value = val
	v.isSet = true
}

func (v NullableCircle) IsSet() bool {
	return v.isSet
}

func (v *NullableCircle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircle(val *Circle) *NullableCircle {
	return &NullableCircle{value: val, isSet: true}
}

func (v NullableCircle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


