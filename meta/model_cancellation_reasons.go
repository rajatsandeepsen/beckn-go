/*
Beckn Protocol Meta API

This document contains all the meta API endpoints that are implemented by the network participants. The information returned from these endpoints typically contain cacheable information.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meta

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CancellationReasons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancellationReasons{}

// CancellationReasons struct for CancellationReasons
type CancellationReasons struct {
	Context CancellationReasonsContext `json:"context"`
	Message CancellationReasonsMessage `json:"message"`
}

type _CancellationReasons CancellationReasons

// NewCancellationReasons instantiates a new CancellationReasons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellationReasons(context CancellationReasonsContext, message CancellationReasonsMessage) *CancellationReasons {
	this := CancellationReasons{}
	this.Context = context
	this.Message = message
	return &this
}

// NewCancellationReasonsWithDefaults instantiates a new CancellationReasons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationReasonsWithDefaults() *CancellationReasons {
	this := CancellationReasons{}
	return &this
}

// GetContext returns the Context field value
func (o *CancellationReasons) GetContext() CancellationReasonsContext {
	if o == nil {
		var ret CancellationReasonsContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *CancellationReasons) GetContextOk() (*CancellationReasonsContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *CancellationReasons) SetContext(v CancellationReasonsContext) {
	o.Context = v
}

// GetMessage returns the Message field value
func (o *CancellationReasons) GetMessage() CancellationReasonsMessage {
	if o == nil {
		var ret CancellationReasonsMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CancellationReasons) GetMessageOk() (*CancellationReasonsMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CancellationReasons) SetMessage(v CancellationReasonsMessage) {
	o.Message = v
}

func (o CancellationReasons) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancellationReasons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *CancellationReasons) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancellationReasons := _CancellationReasons{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancellationReasons)

	if err != nil {
		return err
	}

	*o = CancellationReasons(varCancellationReasons)

	return err
}

type NullableCancellationReasons struct {
	value *CancellationReasons
	isSet bool
}

func (v NullableCancellationReasons) Get() *CancellationReasons {
	return v.value
}

func (v *NullableCancellationReasons) Set(val *CancellationReasons) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationReasons) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationReasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationReasons(val *CancellationReasons) *NullableCancellationReasons {
	return &NullableCancellationReasons{value: val, isSet: true}
}

func (v NullableCancellationReasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationReasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


