/*
Beckn Protocol Meta API

This document contains all the meta API endpoints that are implemented by the network participants. The information returned from these endpoints typically contain cacheable information.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meta

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReturnReasonsMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReturnReasonsMessage{}

// ReturnReasonsMessage struct for ReturnReasonsMessage
type ReturnReasonsMessage struct {
	ReturnReasons []Option `json:"return_reasons"`
}

type _ReturnReasonsMessage ReturnReasonsMessage

// NewReturnReasonsMessage instantiates a new ReturnReasonsMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnReasonsMessage(returnReasons []Option) *ReturnReasonsMessage {
	this := ReturnReasonsMessage{}
	this.ReturnReasons = returnReasons
	return &this
}

// NewReturnReasonsMessageWithDefaults instantiates a new ReturnReasonsMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnReasonsMessageWithDefaults() *ReturnReasonsMessage {
	this := ReturnReasonsMessage{}
	return &this
}

// GetReturnReasons returns the ReturnReasons field value
func (o *ReturnReasonsMessage) GetReturnReasons() []Option {
	if o == nil {
		var ret []Option
		return ret
	}

	return o.ReturnReasons
}

// GetReturnReasonsOk returns a tuple with the ReturnReasons field value
// and a boolean to check if the value has been set.
func (o *ReturnReasonsMessage) GetReturnReasonsOk() ([]Option, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReturnReasons, true
}

// SetReturnReasons sets field value
func (o *ReturnReasonsMessage) SetReturnReasons(v []Option) {
	o.ReturnReasons = v
}

func (o ReturnReasonsMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReturnReasonsMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["return_reasons"] = o.ReturnReasons
	return toSerialize, nil
}

func (o *ReturnReasonsMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"return_reasons",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReturnReasonsMessage := _ReturnReasonsMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReturnReasonsMessage)

	if err != nil {
		return err
	}

	*o = ReturnReasonsMessage(varReturnReasonsMessage)

	return err
}

type NullableReturnReasonsMessage struct {
	value *ReturnReasonsMessage
	isSet bool
}

func (v NullableReturnReasonsMessage) Get() *ReturnReasonsMessage {
	return v.value
}

func (v *NullableReturnReasonsMessage) Set(val *ReturnReasonsMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnReasonsMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnReasonsMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnReasonsMessage(val *ReturnReasonsMessage) *NullableReturnReasonsMessage {
	return &NullableReturnReasonsMessage{value: val, isSet: true}
}

func (v NullableReturnReasonsMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnReasonsMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


