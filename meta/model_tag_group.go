/*
Beckn Protocol Meta API

This document contains all the meta API endpoints that are implemented by the network participants. The information returned from these endpoints typically contain cacheable information.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meta

import (
	"encoding/json"
)

// checks if the TagGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagGroup{}

// TagGroup A collection of tag objects with group level attributes. For detailed documentation on the Tags and Tag Groups schema go to https://github.com/beckn/protocol-specifications/discussions/316
type TagGroup struct {
	// Indicates the display properties of the tag group. If display is set to false, then the group will not be displayed. If it is set to true, it should be displayed. However, group-level display properties can be overriden by individual tag-level display property. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.
	Display *bool `json:"display,omitempty"`
	// Description of the TagGroup, can be used to store detailed information.
	Descriptor *Descriptor `json:"descriptor,omitempty"`
	// An array of Tag objects listed under this group. This property can be set by BAPs during search to narrow the `search` and achieve more relevant results. When received during `on_search`, BAPs must render this list under the heading described by the `name` property of this schema.
	List []Tag `json:"list,omitempty"`
}

// NewTagGroup instantiates a new TagGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagGroup() *TagGroup {
	this := TagGroup{}
	var display bool = true
	this.Display = &display
	return &this
}

// NewTagGroupWithDefaults instantiates a new TagGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagGroupWithDefaults() *TagGroup {
	this := TagGroup{}
	var display bool = true
	this.Display = &display
	return &this
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *TagGroup) GetDisplay() bool {
	if o == nil || IsNil(o.Display) {
		var ret bool
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagGroup) GetDisplayOk() (*bool, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *TagGroup) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given bool and assigns it to the Display field.
func (o *TagGroup) SetDisplay(v bool) {
	o.Display = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *TagGroup) GetDescriptor() Descriptor {
	if o == nil || IsNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagGroup) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *TagGroup) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *TagGroup) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

// GetList returns the List field value if set, zero value otherwise.
func (o *TagGroup) GetList() []Tag {
	if o == nil || IsNil(o.List) {
		var ret []Tag
		return ret
	}
	return o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagGroup) GetListOk() ([]Tag, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *TagGroup) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given []Tag and assigns it to the List field.
func (o *TagGroup) SetList(v []Tag) {
	o.List = v
}

func (o TagGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableTagGroup struct {
	value *TagGroup
	isSet bool
}

func (v NullableTagGroup) Get() *TagGroup {
	return v.value
}

func (v *NullableTagGroup) Set(val *TagGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTagGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTagGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagGroup(val *TagGroup) *NullableTagGroup {
	return &NullableTagGroup{value: val, isSet: true}
}

func (v NullableTagGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


