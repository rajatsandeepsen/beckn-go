/*
Beckn Protocol Meta API

This document contains all the meta API endpoints that are implemented by the network participants. The information returned from these endpoints typically contain cacheable information.

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meta

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CancellationReasonsMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancellationReasonsMessage{}

// CancellationReasonsMessage struct for CancellationReasonsMessage
type CancellationReasonsMessage struct {
	CancellationReasons []Option `json:"cancellation_reasons"`
}

type _CancellationReasonsMessage CancellationReasonsMessage

// NewCancellationReasonsMessage instantiates a new CancellationReasonsMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellationReasonsMessage(cancellationReasons []Option) *CancellationReasonsMessage {
	this := CancellationReasonsMessage{}
	this.CancellationReasons = cancellationReasons
	return &this
}

// NewCancellationReasonsMessageWithDefaults instantiates a new CancellationReasonsMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationReasonsMessageWithDefaults() *CancellationReasonsMessage {
	this := CancellationReasonsMessage{}
	return &this
}

// GetCancellationReasons returns the CancellationReasons field value
func (o *CancellationReasonsMessage) GetCancellationReasons() []Option {
	if o == nil {
		var ret []Option
		return ret
	}

	return o.CancellationReasons
}

// GetCancellationReasonsOk returns a tuple with the CancellationReasons field value
// and a boolean to check if the value has been set.
func (o *CancellationReasonsMessage) GetCancellationReasonsOk() ([]Option, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancellationReasons, true
}

// SetCancellationReasons sets field value
func (o *CancellationReasonsMessage) SetCancellationReasons(v []Option) {
	o.CancellationReasons = v
}

func (o CancellationReasonsMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancellationReasonsMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cancellation_reasons"] = o.CancellationReasons
	return toSerialize, nil
}

func (o *CancellationReasonsMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cancellation_reasons",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancellationReasonsMessage := _CancellationReasonsMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancellationReasonsMessage)

	if err != nil {
		return err
	}

	*o = CancellationReasonsMessage(varCancellationReasonsMessage)

	return err
}

type NullableCancellationReasonsMessage struct {
	value *CancellationReasonsMessage
	isSet bool
}

func (v NullableCancellationReasonsMessage) Get() *CancellationReasonsMessage {
	return v.value
}

func (v *NullableCancellationReasonsMessage) Set(val *CancellationReasonsMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationReasonsMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationReasonsMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationReasonsMessage(val *CancellationReasonsMessage) *NullableCancellationReasonsMessage {
	return &NullableCancellationReasonsMessage{value: val, isSet: true}
}

func (v NullableCancellationReasonsMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationReasonsMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


