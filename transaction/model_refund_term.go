/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the RefundTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefundTerm{}

// RefundTerm Refund term of an item or an order
type RefundTerm struct {
	// The state of fulfillment during which this term is applicable.
	FulfillmentState *State `json:"fulfillment_state,omitempty"`
	// Indicates if cancellation will result in a refund
	RefundEligible *bool `json:"refund_eligible,omitempty"`
	// Time within which refund will be processed after successful cancellation.
	RefundWithin *Time `json:"refund_within,omitempty"`
	RefundAmount *Price `json:"refund_amount,omitempty"`
}

// NewRefundTerm instantiates a new RefundTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundTerm() *RefundTerm {
	this := RefundTerm{}
	return &this
}

// NewRefundTermWithDefaults instantiates a new RefundTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundTermWithDefaults() *RefundTerm {
	this := RefundTerm{}
	return &this
}

// GetFulfillmentState returns the FulfillmentState field value if set, zero value otherwise.
func (o *RefundTerm) GetFulfillmentState() State {
	if o == nil || IsNil(o.FulfillmentState) {
		var ret State
		return ret
	}
	return *o.FulfillmentState
}

// GetFulfillmentStateOk returns a tuple with the FulfillmentState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundTerm) GetFulfillmentStateOk() (*State, bool) {
	if o == nil || IsNil(o.FulfillmentState) {
		return nil, false
	}
	return o.FulfillmentState, true
}

// HasFulfillmentState returns a boolean if a field has been set.
func (o *RefundTerm) HasFulfillmentState() bool {
	if o != nil && !IsNil(o.FulfillmentState) {
		return true
	}

	return false
}

// SetFulfillmentState gets a reference to the given State and assigns it to the FulfillmentState field.
func (o *RefundTerm) SetFulfillmentState(v State) {
	o.FulfillmentState = &v
}

// GetRefundEligible returns the RefundEligible field value if set, zero value otherwise.
func (o *RefundTerm) GetRefundEligible() bool {
	if o == nil || IsNil(o.RefundEligible) {
		var ret bool
		return ret
	}
	return *o.RefundEligible
}

// GetRefundEligibleOk returns a tuple with the RefundEligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundTerm) GetRefundEligibleOk() (*bool, bool) {
	if o == nil || IsNil(o.RefundEligible) {
		return nil, false
	}
	return o.RefundEligible, true
}

// HasRefundEligible returns a boolean if a field has been set.
func (o *RefundTerm) HasRefundEligible() bool {
	if o != nil && !IsNil(o.RefundEligible) {
		return true
	}

	return false
}

// SetRefundEligible gets a reference to the given bool and assigns it to the RefundEligible field.
func (o *RefundTerm) SetRefundEligible(v bool) {
	o.RefundEligible = &v
}

// GetRefundWithin returns the RefundWithin field value if set, zero value otherwise.
func (o *RefundTerm) GetRefundWithin() Time {
	if o == nil || IsNil(o.RefundWithin) {
		var ret Time
		return ret
	}
	return *o.RefundWithin
}

// GetRefundWithinOk returns a tuple with the RefundWithin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundTerm) GetRefundWithinOk() (*Time, bool) {
	if o == nil || IsNil(o.RefundWithin) {
		return nil, false
	}
	return o.RefundWithin, true
}

// HasRefundWithin returns a boolean if a field has been set.
func (o *RefundTerm) HasRefundWithin() bool {
	if o != nil && !IsNil(o.RefundWithin) {
		return true
	}

	return false
}

// SetRefundWithin gets a reference to the given Time and assigns it to the RefundWithin field.
func (o *RefundTerm) SetRefundWithin(v Time) {
	o.RefundWithin = &v
}

// GetRefundAmount returns the RefundAmount field value if set, zero value otherwise.
func (o *RefundTerm) GetRefundAmount() Price {
	if o == nil || IsNil(o.RefundAmount) {
		var ret Price
		return ret
	}
	return *o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundTerm) GetRefundAmountOk() (*Price, bool) {
	if o == nil || IsNil(o.RefundAmount) {
		return nil, false
	}
	return o.RefundAmount, true
}

// HasRefundAmount returns a boolean if a field has been set.
func (o *RefundTerm) HasRefundAmount() bool {
	if o != nil && !IsNil(o.RefundAmount) {
		return true
	}

	return false
}

// SetRefundAmount gets a reference to the given Price and assigns it to the RefundAmount field.
func (o *RefundTerm) SetRefundAmount(v Price) {
	o.RefundAmount = &v
}

func (o RefundTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FulfillmentState) {
		toSerialize["fulfillment_state"] = o.FulfillmentState
	}
	if !IsNil(o.RefundEligible) {
		toSerialize["refund_eligible"] = o.RefundEligible
	}
	if !IsNil(o.RefundWithin) {
		toSerialize["refund_within"] = o.RefundWithin
	}
	if !IsNil(o.RefundAmount) {
		toSerialize["refund_amount"] = o.RefundAmount
	}
	return toSerialize, nil
}

type NullableRefundTerm struct {
	value *RefundTerm
	isSet bool
}

func (v NullableRefundTerm) Get() *RefundTerm {
	return v.value
}

func (v *NullableRefundTerm) Set(val *RefundTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundTerm(val *RefundTerm) *NullableRefundTerm {
	return &NullableRefundTerm{value: val, isSet: true}
}

func (v NullableRefundTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


