/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Scalar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Scalar{}

// Scalar Describes a scalar
type Scalar struct {
	Type *string `json:"type,omitempty"`
	// Describes a numerical value in decimal form
	Value *string `json:"value,omitempty" validate:"regexp=[+-]?([0-9]*[.])?[0-9]+"`
	// Describes a numerical value in decimal form
	EstimatedValue *string `json:"estimated_value,omitempty" validate:"regexp=[+-]?([0-9]*[.])?[0-9]+"`
	// Describes a numerical value in decimal form
	ComputedValue *string `json:"computed_value,omitempty" validate:"regexp=[+-]?([0-9]*[.])?[0-9]+"`
	Range *ScalarRange `json:"range,omitempty"`
	Unit *string `json:"unit,omitempty"`
}

// NewScalar instantiates a new Scalar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScalar() *Scalar {
	this := Scalar{}
	return &this
}

// NewScalarWithDefaults instantiates a new Scalar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScalarWithDefaults() *Scalar {
	this := Scalar{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Scalar) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scalar) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Scalar) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Scalar) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Scalar) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scalar) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Scalar) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Scalar) SetValue(v string) {
	o.Value = &v
}

// GetEstimatedValue returns the EstimatedValue field value if set, zero value otherwise.
func (o *Scalar) GetEstimatedValue() string {
	if o == nil || IsNil(o.EstimatedValue) {
		var ret string
		return ret
	}
	return *o.EstimatedValue
}

// GetEstimatedValueOk returns a tuple with the EstimatedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scalar) GetEstimatedValueOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedValue) {
		return nil, false
	}
	return o.EstimatedValue, true
}

// HasEstimatedValue returns a boolean if a field has been set.
func (o *Scalar) HasEstimatedValue() bool {
	if o != nil && !IsNil(o.EstimatedValue) {
		return true
	}

	return false
}

// SetEstimatedValue gets a reference to the given string and assigns it to the EstimatedValue field.
func (o *Scalar) SetEstimatedValue(v string) {
	o.EstimatedValue = &v
}

// GetComputedValue returns the ComputedValue field value if set, zero value otherwise.
func (o *Scalar) GetComputedValue() string {
	if o == nil || IsNil(o.ComputedValue) {
		var ret string
		return ret
	}
	return *o.ComputedValue
}

// GetComputedValueOk returns a tuple with the ComputedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scalar) GetComputedValueOk() (*string, bool) {
	if o == nil || IsNil(o.ComputedValue) {
		return nil, false
	}
	return o.ComputedValue, true
}

// HasComputedValue returns a boolean if a field has been set.
func (o *Scalar) HasComputedValue() bool {
	if o != nil && !IsNil(o.ComputedValue) {
		return true
	}

	return false
}

// SetComputedValue gets a reference to the given string and assigns it to the ComputedValue field.
func (o *Scalar) SetComputedValue(v string) {
	o.ComputedValue = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *Scalar) GetRange() ScalarRange {
	if o == nil || IsNil(o.Range) {
		var ret ScalarRange
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scalar) GetRangeOk() (*ScalarRange, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *Scalar) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given ScalarRange and assigns it to the Range field.
func (o *Scalar) SetRange(v ScalarRange) {
	o.Range = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *Scalar) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scalar) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *Scalar) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *Scalar) SetUnit(v string) {
	o.Unit = &v
}

func (o Scalar) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Scalar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.EstimatedValue) {
		toSerialize["estimated_value"] = o.EstimatedValue
	}
	if !IsNil(o.ComputedValue) {
		toSerialize["computed_value"] = o.ComputedValue
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableScalar struct {
	value *Scalar
	isSet bool
}

func (v NullableScalar) Get() *Scalar {
	return v.value
}

func (v *NullableScalar) Set(val *Scalar) {
	v.value = val
	v.isSet = true
}

func (v NullableScalar) IsSet() bool {
	return v.isSet
}

func (v *NullableScalar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScalar(val *Scalar) *NullableScalar {
	return &NullableScalar{value: val, isSet: true}
}

func (v NullableScalar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScalar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


