/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"time"
)

// checks if the Cancellation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cancellation{}

// Cancellation Describes a cancellation event
type Cancellation struct {
	// Date-time when the order was cancelled by the buyer
	Time *time.Time `json:"time,omitempty"`
	CancelledBy *string `json:"cancelled_by,omitempty"`
	// The reason for cancellation
	Reason *Option `json:"reason,omitempty"`
	// Any additional information regarding the nature of cancellation
	AdditionalDescription *Descriptor `json:"additional_description,omitempty"`
}

// NewCancellation instantiates a new Cancellation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellation() *Cancellation {
	this := Cancellation{}
	return &this
}

// NewCancellationWithDefaults instantiates a new Cancellation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationWithDefaults() *Cancellation {
	this := Cancellation{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Cancellation) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Cancellation) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *Cancellation) SetTime(v time.Time) {
	o.Time = &v
}

// GetCancelledBy returns the CancelledBy field value if set, zero value otherwise.
func (o *Cancellation) GetCancelledBy() string {
	if o == nil || IsNil(o.CancelledBy) {
		var ret string
		return ret
	}
	return *o.CancelledBy
}

// GetCancelledByOk returns a tuple with the CancelledBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetCancelledByOk() (*string, bool) {
	if o == nil || IsNil(o.CancelledBy) {
		return nil, false
	}
	return o.CancelledBy, true
}

// HasCancelledBy returns a boolean if a field has been set.
func (o *Cancellation) HasCancelledBy() bool {
	if o != nil && !IsNil(o.CancelledBy) {
		return true
	}

	return false
}

// SetCancelledBy gets a reference to the given string and assigns it to the CancelledBy field.
func (o *Cancellation) SetCancelledBy(v string) {
	o.CancelledBy = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Cancellation) GetReason() Option {
	if o == nil || IsNil(o.Reason) {
		var ret Option
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetReasonOk() (*Option, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Cancellation) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given Option and assigns it to the Reason field.
func (o *Cancellation) SetReason(v Option) {
	o.Reason = &v
}

// GetAdditionalDescription returns the AdditionalDescription field value if set, zero value otherwise.
func (o *Cancellation) GetAdditionalDescription() Descriptor {
	if o == nil || IsNil(o.AdditionalDescription) {
		var ret Descriptor
		return ret
	}
	return *o.AdditionalDescription
}

// GetAdditionalDescriptionOk returns a tuple with the AdditionalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetAdditionalDescriptionOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.AdditionalDescription) {
		return nil, false
	}
	return o.AdditionalDescription, true
}

// HasAdditionalDescription returns a boolean if a field has been set.
func (o *Cancellation) HasAdditionalDescription() bool {
	if o != nil && !IsNil(o.AdditionalDescription) {
		return true
	}

	return false
}

// SetAdditionalDescription gets a reference to the given Descriptor and assigns it to the AdditionalDescription field.
func (o *Cancellation) SetAdditionalDescription(v Descriptor) {
	o.AdditionalDescription = &v
}

func (o Cancellation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cancellation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.CancelledBy) {
		toSerialize["cancelled_by"] = o.CancelledBy
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.AdditionalDescription) {
		toSerialize["additional_description"] = o.AdditionalDescription
	}
	return toSerialize, nil
}

type NullableCancellation struct {
	value *Cancellation
	isSet bool
}

func (v NullableCancellation) Get() *Cancellation {
	return v.value
}

func (v *NullableCancellation) Set(val *Cancellation) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellation) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellation(val *Cancellation) *NullableCancellation {
	return &NullableCancellation{value: val, isSet: true}
}

func (v NullableCancellation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


