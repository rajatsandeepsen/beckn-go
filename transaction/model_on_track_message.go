/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnTrackMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnTrackMessage{}

// OnTrackMessage struct for OnTrackMessage
type OnTrackMessage struct {
	Tracking Tracking `json:"tracking"`
}

type _OnTrackMessage OnTrackMessage

// NewOnTrackMessage instantiates a new OnTrackMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnTrackMessage(tracking Tracking) *OnTrackMessage {
	this := OnTrackMessage{}
	this.Tracking = tracking
	return &this
}

// NewOnTrackMessageWithDefaults instantiates a new OnTrackMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnTrackMessageWithDefaults() *OnTrackMessage {
	this := OnTrackMessage{}
	return &this
}

// GetTracking returns the Tracking field value
func (o *OnTrackMessage) GetTracking() Tracking {
	if o == nil {
		var ret Tracking
		return ret
	}

	return o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value
// and a boolean to check if the value has been set.
func (o *OnTrackMessage) GetTrackingOk() (*Tracking, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tracking, true
}

// SetTracking sets field value
func (o *OnTrackMessage) SetTracking(v Tracking) {
	o.Tracking = v
}

func (o OnTrackMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnTrackMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tracking"] = o.Tracking
	return toSerialize, nil
}

func (o *OnTrackMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tracking",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnTrackMessage := _OnTrackMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnTrackMessage)

	if err != nil {
		return err
	}

	*o = OnTrackMessage(varOnTrackMessage)

	return err
}

type NullableOnTrackMessage struct {
	value *OnTrackMessage
	isSet bool
}

func (v NullableOnTrackMessage) Get() *OnTrackMessage {
	return v.value
}

func (v *NullableOnTrackMessage) Set(val *OnTrackMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableOnTrackMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableOnTrackMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnTrackMessage(val *OnTrackMessage) *NullableOnTrackMessage {
	return &NullableOnTrackMessage{value: val, isSet: true}
}

func (v NullableOnTrackMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnTrackMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


