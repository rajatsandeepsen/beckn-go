/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Vehicle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vehicle{}

// Vehicle Describes a vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.<br>This has properties like category, capacity, make, model, size,variant,color,energy_type,registration
type Vehicle struct {
	Category *string `json:"category,omitempty"`
	Capacity *int32 `json:"capacity,omitempty"`
	Make *string `json:"make,omitempty"`
	Model *string `json:"model,omitempty"`
	Size *string `json:"size,omitempty"`
	Variant *string `json:"variant,omitempty"`
	Color *string `json:"color,omitempty"`
	EnergyType *string `json:"energy_type,omitempty"`
	Registration *string `json:"registration,omitempty"`
	WheelsCount *string `json:"wheels_count,omitempty"`
	CargoVolumne *string `json:"cargo_volumne,omitempty"`
	WheelchairAccess *string `json:"wheelchair_access,omitempty"`
	Code *string `json:"code,omitempty"`
	EmissionStandard *string `json:"emission_standard,omitempty"`
}

// NewVehicle instantiates a new Vehicle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicle() *Vehicle {
	this := Vehicle{}
	return &this
}

// NewVehicleWithDefaults instantiates a new Vehicle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleWithDefaults() *Vehicle {
	this := Vehicle{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Vehicle) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Vehicle) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Vehicle) SetCategory(v string) {
	o.Category = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *Vehicle) GetCapacity() int32 {
	if o == nil || IsNil(o.Capacity) {
		var ret int32
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *Vehicle) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int32 and assigns it to the Capacity field.
func (o *Vehicle) SetCapacity(v int32) {
	o.Capacity = &v
}

// GetMake returns the Make field value if set, zero value otherwise.
func (o *Vehicle) GetMake() string {
	if o == nil || IsNil(o.Make) {
		var ret string
		return ret
	}
	return *o.Make
}

// GetMakeOk returns a tuple with the Make field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetMakeOk() (*string, bool) {
	if o == nil || IsNil(o.Make) {
		return nil, false
	}
	return o.Make, true
}

// HasMake returns a boolean if a field has been set.
func (o *Vehicle) HasMake() bool {
	if o != nil && !IsNil(o.Make) {
		return true
	}

	return false
}

// SetMake gets a reference to the given string and assigns it to the Make field.
func (o *Vehicle) SetMake(v string) {
	o.Make = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *Vehicle) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *Vehicle) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *Vehicle) SetModel(v string) {
	o.Model = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Vehicle) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Vehicle) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *Vehicle) SetSize(v string) {
	o.Size = &v
}

// GetVariant returns the Variant field value if set, zero value otherwise.
func (o *Vehicle) GetVariant() string {
	if o == nil || IsNil(o.Variant) {
		var ret string
		return ret
	}
	return *o.Variant
}

// GetVariantOk returns a tuple with the Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetVariantOk() (*string, bool) {
	if o == nil || IsNil(o.Variant) {
		return nil, false
	}
	return o.Variant, true
}

// HasVariant returns a boolean if a field has been set.
func (o *Vehicle) HasVariant() bool {
	if o != nil && !IsNil(o.Variant) {
		return true
	}

	return false
}

// SetVariant gets a reference to the given string and assigns it to the Variant field.
func (o *Vehicle) SetVariant(v string) {
	o.Variant = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Vehicle) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Vehicle) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *Vehicle) SetColor(v string) {
	o.Color = &v
}

// GetEnergyType returns the EnergyType field value if set, zero value otherwise.
func (o *Vehicle) GetEnergyType() string {
	if o == nil || IsNil(o.EnergyType) {
		var ret string
		return ret
	}
	return *o.EnergyType
}

// GetEnergyTypeOk returns a tuple with the EnergyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEnergyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EnergyType) {
		return nil, false
	}
	return o.EnergyType, true
}

// HasEnergyType returns a boolean if a field has been set.
func (o *Vehicle) HasEnergyType() bool {
	if o != nil && !IsNil(o.EnergyType) {
		return true
	}

	return false
}

// SetEnergyType gets a reference to the given string and assigns it to the EnergyType field.
func (o *Vehicle) SetEnergyType(v string) {
	o.EnergyType = &v
}

// GetRegistration returns the Registration field value if set, zero value otherwise.
func (o *Vehicle) GetRegistration() string {
	if o == nil || IsNil(o.Registration) {
		var ret string
		return ret
	}
	return *o.Registration
}

// GetRegistrationOk returns a tuple with the Registration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetRegistrationOk() (*string, bool) {
	if o == nil || IsNil(o.Registration) {
		return nil, false
	}
	return o.Registration, true
}

// HasRegistration returns a boolean if a field has been set.
func (o *Vehicle) HasRegistration() bool {
	if o != nil && !IsNil(o.Registration) {
		return true
	}

	return false
}

// SetRegistration gets a reference to the given string and assigns it to the Registration field.
func (o *Vehicle) SetRegistration(v string) {
	o.Registration = &v
}

// GetWheelsCount returns the WheelsCount field value if set, zero value otherwise.
func (o *Vehicle) GetWheelsCount() string {
	if o == nil || IsNil(o.WheelsCount) {
		var ret string
		return ret
	}
	return *o.WheelsCount
}

// GetWheelsCountOk returns a tuple with the WheelsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetWheelsCountOk() (*string, bool) {
	if o == nil || IsNil(o.WheelsCount) {
		return nil, false
	}
	return o.WheelsCount, true
}

// HasWheelsCount returns a boolean if a field has been set.
func (o *Vehicle) HasWheelsCount() bool {
	if o != nil && !IsNil(o.WheelsCount) {
		return true
	}

	return false
}

// SetWheelsCount gets a reference to the given string and assigns it to the WheelsCount field.
func (o *Vehicle) SetWheelsCount(v string) {
	o.WheelsCount = &v
}

// GetCargoVolumne returns the CargoVolumne field value if set, zero value otherwise.
func (o *Vehicle) GetCargoVolumne() string {
	if o == nil || IsNil(o.CargoVolumne) {
		var ret string
		return ret
	}
	return *o.CargoVolumne
}

// GetCargoVolumneOk returns a tuple with the CargoVolumne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCargoVolumneOk() (*string, bool) {
	if o == nil || IsNil(o.CargoVolumne) {
		return nil, false
	}
	return o.CargoVolumne, true
}

// HasCargoVolumne returns a boolean if a field has been set.
func (o *Vehicle) HasCargoVolumne() bool {
	if o != nil && !IsNil(o.CargoVolumne) {
		return true
	}

	return false
}

// SetCargoVolumne gets a reference to the given string and assigns it to the CargoVolumne field.
func (o *Vehicle) SetCargoVolumne(v string) {
	o.CargoVolumne = &v
}

// GetWheelchairAccess returns the WheelchairAccess field value if set, zero value otherwise.
func (o *Vehicle) GetWheelchairAccess() string {
	if o == nil || IsNil(o.WheelchairAccess) {
		var ret string
		return ret
	}
	return *o.WheelchairAccess
}

// GetWheelchairAccessOk returns a tuple with the WheelchairAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetWheelchairAccessOk() (*string, bool) {
	if o == nil || IsNil(o.WheelchairAccess) {
		return nil, false
	}
	return o.WheelchairAccess, true
}

// HasWheelchairAccess returns a boolean if a field has been set.
func (o *Vehicle) HasWheelchairAccess() bool {
	if o != nil && !IsNil(o.WheelchairAccess) {
		return true
	}

	return false
}

// SetWheelchairAccess gets a reference to the given string and assigns it to the WheelchairAccess field.
func (o *Vehicle) SetWheelchairAccess(v string) {
	o.WheelchairAccess = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Vehicle) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Vehicle) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Vehicle) SetCode(v string) {
	o.Code = &v
}

// GetEmissionStandard returns the EmissionStandard field value if set, zero value otherwise.
func (o *Vehicle) GetEmissionStandard() string {
	if o == nil || IsNil(o.EmissionStandard) {
		var ret string
		return ret
	}
	return *o.EmissionStandard
}

// GetEmissionStandardOk returns a tuple with the EmissionStandard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEmissionStandardOk() (*string, bool) {
	if o == nil || IsNil(o.EmissionStandard) {
		return nil, false
	}
	return o.EmissionStandard, true
}

// HasEmissionStandard returns a boolean if a field has been set.
func (o *Vehicle) HasEmissionStandard() bool {
	if o != nil && !IsNil(o.EmissionStandard) {
		return true
	}

	return false
}

// SetEmissionStandard gets a reference to the given string and assigns it to the EmissionStandard field.
func (o *Vehicle) SetEmissionStandard(v string) {
	o.EmissionStandard = &v
}

func (o Vehicle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vehicle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Make) {
		toSerialize["make"] = o.Make
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Variant) {
		toSerialize["variant"] = o.Variant
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.EnergyType) {
		toSerialize["energy_type"] = o.EnergyType
	}
	if !IsNil(o.Registration) {
		toSerialize["registration"] = o.Registration
	}
	if !IsNil(o.WheelsCount) {
		toSerialize["wheels_count"] = o.WheelsCount
	}
	if !IsNil(o.CargoVolumne) {
		toSerialize["cargo_volumne"] = o.CargoVolumne
	}
	if !IsNil(o.WheelchairAccess) {
		toSerialize["wheelchair_access"] = o.WheelchairAccess
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.EmissionStandard) {
		toSerialize["emission_standard"] = o.EmissionStandard
	}
	return toSerialize, nil
}

type NullableVehicle struct {
	value *Vehicle
	isSet bool
}

func (v NullableVehicle) Get() *Vehicle {
	return v.value
}

func (v *NullableVehicle) Set(val *Vehicle) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicle) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicle(val *Vehicle) *NullableVehicle {
	return &NullableVehicle{value: val, isSet: true}
}

func (v NullableVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


