/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the ItemQuantitySelected type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemQuantitySelected{}

// ItemQuantitySelected This represents the quantity selected for purchase of the item
type ItemQuantitySelected struct {
	Count *int32 `json:"count,omitempty"`
	Measure *Scalar `json:"measure,omitempty"`
}

// NewItemQuantitySelected instantiates a new ItemQuantitySelected object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemQuantitySelected() *ItemQuantitySelected {
	this := ItemQuantitySelected{}
	return &this
}

// NewItemQuantitySelectedWithDefaults instantiates a new ItemQuantitySelected object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemQuantitySelectedWithDefaults() *ItemQuantitySelected {
	this := ItemQuantitySelected{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ItemQuantitySelected) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantitySelected) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ItemQuantitySelected) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ItemQuantitySelected) SetCount(v int32) {
	o.Count = &v
}

// GetMeasure returns the Measure field value if set, zero value otherwise.
func (o *ItemQuantitySelected) GetMeasure() Scalar {
	if o == nil || IsNil(o.Measure) {
		var ret Scalar
		return ret
	}
	return *o.Measure
}

// GetMeasureOk returns a tuple with the Measure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantitySelected) GetMeasureOk() (*Scalar, bool) {
	if o == nil || IsNil(o.Measure) {
		return nil, false
	}
	return o.Measure, true
}

// HasMeasure returns a boolean if a field has been set.
func (o *ItemQuantitySelected) HasMeasure() bool {
	if o != nil && !IsNil(o.Measure) {
		return true
	}

	return false
}

// SetMeasure gets a reference to the given Scalar and assigns it to the Measure field.
func (o *ItemQuantitySelected) SetMeasure(v Scalar) {
	o.Measure = &v
}

func (o ItemQuantitySelected) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemQuantitySelected) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Measure) {
		toSerialize["measure"] = o.Measure
	}
	return toSerialize, nil
}

type NullableItemQuantitySelected struct {
	value *ItemQuantitySelected
	isSet bool
}

func (v NullableItemQuantitySelected) Get() *ItemQuantitySelected {
	return v.value
}

func (v *NullableItemQuantitySelected) Set(val *ItemQuantitySelected) {
	v.value = val
	v.isSet = true
}

func (v NullableItemQuantitySelected) IsSet() bool {
	return v.isSet
}

func (v *NullableItemQuantitySelected) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemQuantitySelected(val *ItemQuantitySelected) *NullableItemQuantitySelected {
	return &NullableItemQuantitySelected{value: val, isSet: true}
}

func (v NullableItemQuantitySelected) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemQuantitySelected) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


