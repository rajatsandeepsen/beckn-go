/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the SearchMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchMessage{}

// SearchMessage struct for SearchMessage
type SearchMessage struct {
	Intent *Intent `json:"intent,omitempty"`
}

// NewSearchMessage instantiates a new SearchMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchMessage() *SearchMessage {
	this := SearchMessage{}
	return &this
}

// NewSearchMessageWithDefaults instantiates a new SearchMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchMessageWithDefaults() *SearchMessage {
	this := SearchMessage{}
	return &this
}

// GetIntent returns the Intent field value if set, zero value otherwise.
func (o *SearchMessage) GetIntent() Intent {
	if o == nil || IsNil(o.Intent) {
		var ret Intent
		return ret
	}
	return *o.Intent
}

// GetIntentOk returns a tuple with the Intent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchMessage) GetIntentOk() (*Intent, bool) {
	if o == nil || IsNil(o.Intent) {
		return nil, false
	}
	return o.Intent, true
}

// HasIntent returns a boolean if a field has been set.
func (o *SearchMessage) HasIntent() bool {
	if o != nil && !IsNil(o.Intent) {
		return true
	}

	return false
}

// SetIntent gets a reference to the given Intent and assigns it to the Intent field.
func (o *SearchMessage) SetIntent(v Intent) {
	o.Intent = &v
}

func (o SearchMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Intent) {
		toSerialize["intent"] = o.Intent
	}
	return toSerialize, nil
}

type NullableSearchMessage struct {
	value *SearchMessage
	isSet bool
}

func (v NullableSearchMessage) Get() *SearchMessage {
	return v.value
}

func (v *NullableSearchMessage) Set(val *SearchMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchMessage(val *SearchMessage) *NullableSearchMessage {
	return &NullableSearchMessage{value: val, isSet: true}
}

func (v NullableSearchMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


