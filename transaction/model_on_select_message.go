/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the OnSelectMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnSelectMessage{}

// OnSelectMessage struct for OnSelectMessage
type OnSelectMessage struct {
	Order *Order `json:"order,omitempty"`
}

// NewOnSelectMessage instantiates a new OnSelectMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnSelectMessage() *OnSelectMessage {
	this := OnSelectMessage{}
	return &this
}

// NewOnSelectMessageWithDefaults instantiates a new OnSelectMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnSelectMessageWithDefaults() *OnSelectMessage {
	this := OnSelectMessage{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *OnSelectMessage) GetOrder() Order {
	if o == nil || IsNil(o.Order) {
		var ret Order
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnSelectMessage) GetOrderOk() (*Order, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *OnSelectMessage) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given Order and assigns it to the Order field.
func (o *OnSelectMessage) SetOrder(v Order) {
	o.Order = &v
}

func (o OnSelectMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnSelectMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableOnSelectMessage struct {
	value *OnSelectMessage
	isSet bool
}

func (v NullableOnSelectMessage) Get() *OnSelectMessage {
	return v.value
}

func (v *NullableOnSelectMessage) Set(val *OnSelectMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableOnSelectMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableOnSelectMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnSelectMessage(val *OnSelectMessage) *NullableOnSelectMessage {
	return &NullableOnSelectMessage{value: val, isSet: true}
}

func (v NullableOnSelectMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnSelectMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


