/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMessage{}

// UpdateMessage struct for UpdateMessage
type UpdateMessage struct {
	// Comma separated values of order objects being updated. For example: ```\"update_target\":\"item,billing,fulfillment\"```
	UpdateTarget string `json:"update_target"`
	// Updated order object
	Order Order `json:"order"`
}

type _UpdateMessage UpdateMessage

// NewUpdateMessage instantiates a new UpdateMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMessage(updateTarget string, order Order) *UpdateMessage {
	this := UpdateMessage{}
	this.UpdateTarget = updateTarget
	this.Order = order
	return &this
}

// NewUpdateMessageWithDefaults instantiates a new UpdateMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMessageWithDefaults() *UpdateMessage {
	this := UpdateMessage{}
	return &this
}

// GetUpdateTarget returns the UpdateTarget field value
func (o *UpdateMessage) GetUpdateTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdateTarget
}

// GetUpdateTargetOk returns a tuple with the UpdateTarget field value
// and a boolean to check if the value has been set.
func (o *UpdateMessage) GetUpdateTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateTarget, true
}

// SetUpdateTarget sets field value
func (o *UpdateMessage) SetUpdateTarget(v string) {
	o.UpdateTarget = v
}

// GetOrder returns the Order field value
func (o *UpdateMessage) GetOrder() Order {
	if o == nil {
		var ret Order
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *UpdateMessage) GetOrderOk() (*Order, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *UpdateMessage) SetOrder(v Order) {
	o.Order = v
}

func (o UpdateMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["update_target"] = o.UpdateTarget
	toSerialize["order"] = o.Order
	return toSerialize, nil
}

func (o *UpdateMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"update_target",
		"order",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMessage := _UpdateMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateMessage)

	if err != nil {
		return err
	}

	*o = UpdateMessage(varUpdateMessage)

	return err
}

type NullableUpdateMessage struct {
	value *UpdateMessage
	isSet bool
}

func (v NullableUpdateMessage) Get() *UpdateMessage {
	return v.value
}

func (v *NullableUpdateMessage) Set(val *UpdateMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMessage(val *UpdateMessage) *NullableUpdateMessage {
	return &NullableUpdateMessage{value: val, isSet: true}
}

func (v NullableUpdateMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


