/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the ReplacementTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplacementTerm{}

// ReplacementTerm The replacement policy of an item or an order
type ReplacementTerm struct {
	// The state of fulfillment during which this term is applicable.
	FulfillmentState *State `json:"fulfillment_state,omitempty"`
	// Applicable only for buyer managed returns where the buyer has to replace the item before a certain date-time, failing which they will not be eligible for replacement
	ReplaceWithin *Time `json:"replace_within,omitempty"`
	ExternalRef *MediaFile `json:"external_ref,omitempty"`
}

// NewReplacementTerm instantiates a new ReplacementTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplacementTerm() *ReplacementTerm {
	this := ReplacementTerm{}
	return &this
}

// NewReplacementTermWithDefaults instantiates a new ReplacementTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplacementTermWithDefaults() *ReplacementTerm {
	this := ReplacementTerm{}
	return &this
}

// GetFulfillmentState returns the FulfillmentState field value if set, zero value otherwise.
func (o *ReplacementTerm) GetFulfillmentState() State {
	if o == nil || IsNil(o.FulfillmentState) {
		var ret State
		return ret
	}
	return *o.FulfillmentState
}

// GetFulfillmentStateOk returns a tuple with the FulfillmentState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementTerm) GetFulfillmentStateOk() (*State, bool) {
	if o == nil || IsNil(o.FulfillmentState) {
		return nil, false
	}
	return o.FulfillmentState, true
}

// HasFulfillmentState returns a boolean if a field has been set.
func (o *ReplacementTerm) HasFulfillmentState() bool {
	if o != nil && !IsNil(o.FulfillmentState) {
		return true
	}

	return false
}

// SetFulfillmentState gets a reference to the given State and assigns it to the FulfillmentState field.
func (o *ReplacementTerm) SetFulfillmentState(v State) {
	o.FulfillmentState = &v
}

// GetReplaceWithin returns the ReplaceWithin field value if set, zero value otherwise.
func (o *ReplacementTerm) GetReplaceWithin() Time {
	if o == nil || IsNil(o.ReplaceWithin) {
		var ret Time
		return ret
	}
	return *o.ReplaceWithin
}

// GetReplaceWithinOk returns a tuple with the ReplaceWithin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementTerm) GetReplaceWithinOk() (*Time, bool) {
	if o == nil || IsNil(o.ReplaceWithin) {
		return nil, false
	}
	return o.ReplaceWithin, true
}

// HasReplaceWithin returns a boolean if a field has been set.
func (o *ReplacementTerm) HasReplaceWithin() bool {
	if o != nil && !IsNil(o.ReplaceWithin) {
		return true
	}

	return false
}

// SetReplaceWithin gets a reference to the given Time and assigns it to the ReplaceWithin field.
func (o *ReplacementTerm) SetReplaceWithin(v Time) {
	o.ReplaceWithin = &v
}

// GetExternalRef returns the ExternalRef field value if set, zero value otherwise.
func (o *ReplacementTerm) GetExternalRef() MediaFile {
	if o == nil || IsNil(o.ExternalRef) {
		var ret MediaFile
		return ret
	}
	return *o.ExternalRef
}

// GetExternalRefOk returns a tuple with the ExternalRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplacementTerm) GetExternalRefOk() (*MediaFile, bool) {
	if o == nil || IsNil(o.ExternalRef) {
		return nil, false
	}
	return o.ExternalRef, true
}

// HasExternalRef returns a boolean if a field has been set.
func (o *ReplacementTerm) HasExternalRef() bool {
	if o != nil && !IsNil(o.ExternalRef) {
		return true
	}

	return false
}

// SetExternalRef gets a reference to the given MediaFile and assigns it to the ExternalRef field.
func (o *ReplacementTerm) SetExternalRef(v MediaFile) {
	o.ExternalRef = &v
}

func (o ReplacementTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplacementTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FulfillmentState) {
		toSerialize["fulfillment_state"] = o.FulfillmentState
	}
	if !IsNil(o.ReplaceWithin) {
		toSerialize["replace_within"] = o.ReplaceWithin
	}
	if !IsNil(o.ExternalRef) {
		toSerialize["external_ref"] = o.ExternalRef
	}
	return toSerialize, nil
}

type NullableReplacementTerm struct {
	value *ReplacementTerm
	isSet bool
}

func (v NullableReplacementTerm) Get() *ReplacementTerm {
	return v.value
}

func (v *NullableReplacementTerm) Set(val *ReplacementTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableReplacementTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableReplacementTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplacementTerm(val *ReplacementTerm) *NullableReplacementTerm {
	return &NullableReplacementTerm{value: val, isSet: true}
}

func (v NullableReplacementTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplacementTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


