/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InlineObjectMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InlineObjectMessage{}

// InlineObjectMessage struct for InlineObjectMessage
type InlineObjectMessage struct {
	Ack InlineObjectMessageAck `json:"ack"`
}

type _InlineObjectMessage InlineObjectMessage

// NewInlineObjectMessage instantiates a new InlineObjectMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObjectMessage(ack InlineObjectMessageAck) *InlineObjectMessage {
	this := InlineObjectMessage{}
	this.Ack = ack
	return &this
}

// NewInlineObjectMessageWithDefaults instantiates a new InlineObjectMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObjectMessageWithDefaults() *InlineObjectMessage {
	this := InlineObjectMessage{}
	return &this
}

// GetAck returns the Ack field value
func (o *InlineObjectMessage) GetAck() InlineObjectMessageAck {
	if o == nil {
		var ret InlineObjectMessageAck
		return ret
	}

	return o.Ack
}

// GetAckOk returns a tuple with the Ack field value
// and a boolean to check if the value has been set.
func (o *InlineObjectMessage) GetAckOk() (*InlineObjectMessageAck, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ack, true
}

// SetAck sets field value
func (o *InlineObjectMessage) SetAck(v InlineObjectMessageAck) {
	o.Ack = v
}

func (o InlineObjectMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InlineObjectMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ack"] = o.Ack
	return toSerialize, nil
}

func (o *InlineObjectMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ack",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInlineObjectMessage := _InlineObjectMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInlineObjectMessage)

	if err != nil {
		return err
	}

	*o = InlineObjectMessage(varInlineObjectMessage)

	return err
}

type NullableInlineObjectMessage struct {
	value *InlineObjectMessage
	isSet bool
}

func (v NullableInlineObjectMessage) Get() *InlineObjectMessage {
	return v.value
}

func (v *NullableInlineObjectMessage) Set(val *InlineObjectMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObjectMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObjectMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObjectMessage(val *InlineObjectMessage) *NullableInlineObjectMessage {
	return &NullableInlineObjectMessage{value: val, isSet: true}
}

func (v NullableInlineObjectMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObjectMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


