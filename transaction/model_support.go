/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Support type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Support{}

// Support Details of customer support
type Support struct {
	RefId *string `json:"ref_id,omitempty"`
	CallbackPhone *string `json:"callback_phone,omitempty"`
	Phone *string `json:"phone,omitempty"`
	Email *string `json:"email,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewSupport instantiates a new Support object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupport() *Support {
	this := Support{}
	return &this
}

// NewSupportWithDefaults instantiates a new Support object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportWithDefaults() *Support {
	this := Support{}
	return &this
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Support) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Support) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Support) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *Support) SetRefId(v string) {
	o.RefId = &v
}

// GetCallbackPhone returns the CallbackPhone field value if set, zero value otherwise.
func (o *Support) GetCallbackPhone() string {
	if o == nil || IsNil(o.CallbackPhone) {
		var ret string
		return ret
	}
	return *o.CallbackPhone
}

// GetCallbackPhoneOk returns a tuple with the CallbackPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Support) GetCallbackPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackPhone) {
		return nil, false
	}
	return o.CallbackPhone, true
}

// HasCallbackPhone returns a boolean if a field has been set.
func (o *Support) HasCallbackPhone() bool {
	if o != nil && !IsNil(o.CallbackPhone) {
		return true
	}

	return false
}

// SetCallbackPhone gets a reference to the given string and assigns it to the CallbackPhone field.
func (o *Support) SetCallbackPhone(v string) {
	o.CallbackPhone = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *Support) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Support) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *Support) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *Support) SetPhone(v string) {
	o.Phone = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Support) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Support) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Support) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Support) SetEmail(v string) {
	o.Email = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Support) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Support) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Support) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Support) SetUrl(v string) {
	o.Url = &v
}

func (o Support) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Support) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.CallbackPhone) {
		toSerialize["callback_phone"] = o.CallbackPhone
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableSupport struct {
	value *Support
	isSet bool
}

func (v NullableSupport) Get() *Support {
	return v.value
}

func (v *NullableSupport) Set(val *Support) {
	v.value = val
	v.isSet = true
}

func (v NullableSupport) IsSet() bool {
	return v.isSet
}

func (v *NullableSupport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupport(val *Support) *NullableSupport {
	return &NullableSupport{value: val, isSet: true}
}

func (v NullableSupport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


