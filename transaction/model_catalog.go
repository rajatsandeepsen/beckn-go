/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"time"
)

// checks if the Catalog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Catalog{}

// Catalog Describes the products or services offered by a BPP. This is typically sent as the response to a search intent from a BAP. The payment terms, offers and terms of fulfillment supported by the BPP can also be included here. The BPP can show hierarchical nature of products/services in its catalog using the parent_category_id in categories. The BPP can also send a ttl (time to live) in the context which is the duration for which a BAP can cache the catalog and use the cached catalog.  <br>This has properties like bbp/descriptor,bbp/categories,bbp/fulfillments,bbp/payments,bbp/offers,bbp/providers and exp<br>This is used in the following situations.<br><ul><li>This is typically used in the discovery stage when the BPP sends the details of the products and services it offers as response to a search intent from the BAP. </li></ul>
type Catalog struct {
	Descriptor *Descriptor `json:"descriptor,omitempty"`
	// Fulfillment modes offered at the BPP level. This is used when a BPP itself offers fulfillments on behalf of the providers it has onboarded.
	Fulfillments []Fulfillment `json:"fulfillments,omitempty"`
	// Payment terms offered by the BPP for all transactions. This can be overriden at the provider level.
	Payments []Payment `json:"payments,omitempty"`
	// Offers at the BPP-level. This is common across all providers onboarded by the BPP.
	Offers []Offer `json:"offers,omitempty"`
	Providers []Provider `json:"providers,omitempty"`
	// Timestamp after which catalog will expire
	Exp *time.Time `json:"exp,omitempty"`
	// Duration in seconds after which this catalog will expire
	Ttl *string `json:"ttl,omitempty"`
}

// NewCatalog instantiates a new Catalog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalog() *Catalog {
	this := Catalog{}
	return &this
}

// NewCatalogWithDefaults instantiates a new Catalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogWithDefaults() *Catalog {
	this := Catalog{}
	return &this
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *Catalog) GetDescriptor() Descriptor {
	if o == nil || IsNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *Catalog) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *Catalog) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

// GetFulfillments returns the Fulfillments field value if set, zero value otherwise.
func (o *Catalog) GetFulfillments() []Fulfillment {
	if o == nil || IsNil(o.Fulfillments) {
		var ret []Fulfillment
		return ret
	}
	return o.Fulfillments
}

// GetFulfillmentsOk returns a tuple with the Fulfillments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetFulfillmentsOk() ([]Fulfillment, bool) {
	if o == nil || IsNil(o.Fulfillments) {
		return nil, false
	}
	return o.Fulfillments, true
}

// HasFulfillments returns a boolean if a field has been set.
func (o *Catalog) HasFulfillments() bool {
	if o != nil && !IsNil(o.Fulfillments) {
		return true
	}

	return false
}

// SetFulfillments gets a reference to the given []Fulfillment and assigns it to the Fulfillments field.
func (o *Catalog) SetFulfillments(v []Fulfillment) {
	o.Fulfillments = v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *Catalog) GetPayments() []Payment {
	if o == nil || IsNil(o.Payments) {
		var ret []Payment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetPaymentsOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *Catalog) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []Payment and assigns it to the Payments field.
func (o *Catalog) SetPayments(v []Payment) {
	o.Payments = v
}

// GetOffers returns the Offers field value if set, zero value otherwise.
func (o *Catalog) GetOffers() []Offer {
	if o == nil || IsNil(o.Offers) {
		var ret []Offer
		return ret
	}
	return o.Offers
}

// GetOffersOk returns a tuple with the Offers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetOffersOk() ([]Offer, bool) {
	if o == nil || IsNil(o.Offers) {
		return nil, false
	}
	return o.Offers, true
}

// HasOffers returns a boolean if a field has been set.
func (o *Catalog) HasOffers() bool {
	if o != nil && !IsNil(o.Offers) {
		return true
	}

	return false
}

// SetOffers gets a reference to the given []Offer and assigns it to the Offers field.
func (o *Catalog) SetOffers(v []Offer) {
	o.Offers = v
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *Catalog) GetProviders() []Provider {
	if o == nil || IsNil(o.Providers) {
		var ret []Provider
		return ret
	}
	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetProvidersOk() ([]Provider, bool) {
	if o == nil || IsNil(o.Providers) {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *Catalog) HasProviders() bool {
	if o != nil && !IsNil(o.Providers) {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []Provider and assigns it to the Providers field.
func (o *Catalog) SetProviders(v []Provider) {
	o.Providers = v
}

// GetExp returns the Exp field value if set, zero value otherwise.
func (o *Catalog) GetExp() time.Time {
	if o == nil || IsNil(o.Exp) {
		var ret time.Time
		return ret
	}
	return *o.Exp
}

// GetExpOk returns a tuple with the Exp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetExpOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Exp) {
		return nil, false
	}
	return o.Exp, true
}

// HasExp returns a boolean if a field has been set.
func (o *Catalog) HasExp() bool {
	if o != nil && !IsNil(o.Exp) {
		return true
	}

	return false
}

// SetExp gets a reference to the given time.Time and assigns it to the Exp field.
func (o *Catalog) SetExp(v time.Time) {
	o.Exp = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Catalog) GetTtl() string {
	if o == nil || IsNil(o.Ttl) {
		var ret string
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetTtlOk() (*string, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Catalog) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given string and assigns it to the Ttl field.
func (o *Catalog) SetTtl(v string) {
	o.Ttl = &v
}

func (o Catalog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Catalog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !IsNil(o.Fulfillments) {
		toSerialize["fulfillments"] = o.Fulfillments
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.Offers) {
		toSerialize["offers"] = o.Offers
	}
	if !IsNil(o.Providers) {
		toSerialize["providers"] = o.Providers
	}
	if !IsNil(o.Exp) {
		toSerialize["exp"] = o.Exp
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	return toSerialize, nil
}

type NullableCatalog struct {
	value *Catalog
	isSet bool
}

func (v NullableCatalog) Get() *Catalog {
	return v.value
}

func (v *NullableCatalog) Set(val *Catalog) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalog(val *Catalog) *NullableCatalog {
	return &NullableCatalog{value: val, isSet: true}
}

func (v NullableCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


