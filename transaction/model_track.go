/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Track type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Track{}

// Track struct for Track
type Track struct {
	Context TrackContext `json:"context"`
	Message TrackMessage `json:"message"`
}

type _Track Track

// NewTrack instantiates a new Track object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrack(context TrackContext, message TrackMessage) *Track {
	this := Track{}
	this.Context = context
	this.Message = message
	return &this
}

// NewTrackWithDefaults instantiates a new Track object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackWithDefaults() *Track {
	this := Track{}
	return &this
}

// GetContext returns the Context field value
func (o *Track) GetContext() TrackContext {
	if o == nil {
		var ret TrackContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *Track) GetContextOk() (*TrackContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *Track) SetContext(v TrackContext) {
	o.Context = v
}

// GetMessage returns the Message field value
func (o *Track) GetMessage() TrackMessage {
	if o == nil {
		var ret TrackMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Track) GetMessageOk() (*TrackMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Track) SetMessage(v TrackMessage) {
	o.Message = v
}

func (o Track) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Track) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *Track) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrack := _Track{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrack)

	if err != nil {
		return err
	}

	*o = Track(varTrack)

	return err
}

type NullableTrack struct {
	value *Track
	isSet bool
}

func (v NullableTrack) Get() *Track {
	return v.value
}

func (v *NullableTrack) Set(val *Track) {
	v.value = val
	v.isSet = true
}

func (v NullableTrack) IsSet() bool {
	return v.isSet
}

func (v *NullableTrack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrack(val *Track) *NullableTrack {
	return &NullableTrack{value: val, isSet: true}
}

func (v NullableTrack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


