/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CancelMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelMessage{}

// CancelMessage struct for CancelMessage
type CancelMessage struct {
	// Human-readable ID of the order. This is generated at the BPP layer. The BPP can either generate order id within its system or forward the order ID created at the provider level.
	OrderId string `json:"order_id"`
	CancellationReasonId *string `json:"cancellation_reason_id,omitempty"`
	Descriptor *Descriptor `json:"descriptor,omitempty"`
}

type _CancelMessage CancelMessage

// NewCancelMessage instantiates a new CancelMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelMessage(orderId string) *CancelMessage {
	this := CancelMessage{}
	this.OrderId = orderId
	return &this
}

// NewCancelMessageWithDefaults instantiates a new CancelMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelMessageWithDefaults() *CancelMessage {
	this := CancelMessage{}
	return &this
}

// GetOrderId returns the OrderId field value
func (o *CancelMessage) GetOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *CancelMessage) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *CancelMessage) SetOrderId(v string) {
	o.OrderId = v
}

// GetCancellationReasonId returns the CancellationReasonId field value if set, zero value otherwise.
func (o *CancelMessage) GetCancellationReasonId() string {
	if o == nil || IsNil(o.CancellationReasonId) {
		var ret string
		return ret
	}
	return *o.CancellationReasonId
}

// GetCancellationReasonIdOk returns a tuple with the CancellationReasonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelMessage) GetCancellationReasonIdOk() (*string, bool) {
	if o == nil || IsNil(o.CancellationReasonId) {
		return nil, false
	}
	return o.CancellationReasonId, true
}

// HasCancellationReasonId returns a boolean if a field has been set.
func (o *CancelMessage) HasCancellationReasonId() bool {
	if o != nil && !IsNil(o.CancellationReasonId) {
		return true
	}

	return false
}

// SetCancellationReasonId gets a reference to the given string and assigns it to the CancellationReasonId field.
func (o *CancelMessage) SetCancellationReasonId(v string) {
	o.CancellationReasonId = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *CancelMessage) GetDescriptor() Descriptor {
	if o == nil || IsNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelMessage) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *CancelMessage) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *CancelMessage) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

func (o CancelMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["order_id"] = o.OrderId
	if !IsNil(o.CancellationReasonId) {
		toSerialize["cancellation_reason_id"] = o.CancellationReasonId
	}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	return toSerialize, nil
}

func (o *CancelMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelMessage := _CancelMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancelMessage)

	if err != nil {
		return err
	}

	*o = CancelMessage(varCancelMessage)

	return err
}

type NullableCancelMessage struct {
	value *CancelMessage
	isSet bool
}

func (v NullableCancelMessage) Get() *CancelMessage {
	return v.value
}

func (v *NullableCancelMessage) Set(val *CancelMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelMessage(val *CancelMessage) *NullableCancelMessage {
	return &NullableCancelMessage{value: val, isSet: true}
}

func (v NullableCancelMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


