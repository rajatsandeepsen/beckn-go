/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"time"
)

// checks if the FulfillmentState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FulfillmentState{}

// FulfillmentState Describes the state of fulfillment
type FulfillmentState struct {
	Descriptor *Descriptor `json:"descriptor,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// ID of entity which changed the state
	UpdatedBy *string `json:"updated_by,omitempty"`
}

// NewFulfillmentState instantiates a new FulfillmentState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFulfillmentState() *FulfillmentState {
	this := FulfillmentState{}
	return &this
}

// NewFulfillmentStateWithDefaults instantiates a new FulfillmentState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFulfillmentStateWithDefaults() *FulfillmentState {
	this := FulfillmentState{}
	return &this
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *FulfillmentState) GetDescriptor() Descriptor {
	if o == nil || IsNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentState) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *FulfillmentState) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *FulfillmentState) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FulfillmentState) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentState) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FulfillmentState) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *FulfillmentState) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *FulfillmentState) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentState) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *FulfillmentState) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *FulfillmentState) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

func (o FulfillmentState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FulfillmentState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	return toSerialize, nil
}

type NullableFulfillmentState struct {
	value *FulfillmentState
	isSet bool
}

func (v NullableFulfillmentState) Get() *FulfillmentState {
	return v.value
}

func (v *NullableFulfillmentState) Set(val *FulfillmentState) {
	v.value = val
	v.isSet = true
}

func (v NullableFulfillmentState) IsSet() bool {
	return v.isSet
}

func (v *NullableFulfillmentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFulfillmentState(val *FulfillmentState) *NullableFulfillmentState {
	return &NullableFulfillmentState{value: val, isSet: true}
}

func (v NullableFulfillmentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFulfillmentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


