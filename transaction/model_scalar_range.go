/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the ScalarRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScalarRange{}

// ScalarRange struct for ScalarRange
type ScalarRange struct {
	// Describes a numerical value in decimal form
	Min *string `json:"min,omitempty" validate:"regexp=[+-]?([0-9]*[.])?[0-9]+"`
	// Describes a numerical value in decimal form
	Max *string `json:"max,omitempty" validate:"regexp=[+-]?([0-9]*[.])?[0-9]+"`
}

// NewScalarRange instantiates a new ScalarRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScalarRange() *ScalarRange {
	this := ScalarRange{}
	return &this
}

// NewScalarRangeWithDefaults instantiates a new ScalarRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScalarRangeWithDefaults() *ScalarRange {
	this := ScalarRange{}
	return &this
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *ScalarRange) GetMin() string {
	if o == nil || IsNil(o.Min) {
		var ret string
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalarRange) GetMinOk() (*string, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *ScalarRange) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given string and assigns it to the Min field.
func (o *ScalarRange) SetMin(v string) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *ScalarRange) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalarRange) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *ScalarRange) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *ScalarRange) SetMax(v string) {
	o.Max = &v
}

func (o ScalarRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScalarRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	return toSerialize, nil
}

type NullableScalarRange struct {
	value *ScalarRange
	isSet bool
}

func (v NullableScalarRange) Get() *ScalarRange {
	return v.value
}

func (v *NullableScalarRange) Set(val *ScalarRange) {
	v.value = val
	v.isSet = true
}

func (v NullableScalarRange) IsSet() bool {
	return v.isSet
}

func (v *NullableScalarRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScalarRange(val *ScalarRange) *NullableScalarRange {
	return &NullableScalarRange{value: val, isSet: true}
}

func (v NullableScalarRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScalarRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


