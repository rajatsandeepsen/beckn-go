/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Item type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Item{}

// Item Describes a product or a service offered to the end consumer by the provider. In the mobility sector, it can represent a fare product like one way journey. In the logistics sector, it can represent the delivery service offering. In the retail domain it can represent a product like a grocery item.
type Item struct {
	// ID of the item.
	Id *string `json:"id,omitempty"`
	// ID of the item, this item is a variant of
	ParentItemId *string `json:"parent_item_id,omitempty"`
	// The number of units of the parent item this item is a multiple of
	ParentItemQuantity *ItemQuantity `json:"parent_item_quantity,omitempty"`
	// Physical description of the item
	Descriptor *Descriptor `json:"descriptor,omitempty"`
	// The creator of this item
	Creator *Organization `json:"creator,omitempty"`
	// The price of this item, if it has intrinsic value
	Price *Price `json:"price,omitempty"`
	// The selling quantity of the item
	Quantity *ItemQuantity `json:"quantity,omitempty"`
	// Categories this item can be listed under
	CategoryIds []string `json:"category_ids,omitempty"`
	// Modes through which this item can be fulfilled
	FulfillmentIds []string `json:"fulfillment_ids,omitempty"`
	// Provider Locations this item is available in
	LocationIds []string `json:"location_ids,omitempty"`
	// Payment modalities through which this item can be ordered
	PaymentIds []string `json:"payment_ids,omitempty"`
	AddOns []AddOn `json:"add_ons,omitempty"`
	// Cancellation terms of this item
	CancellationTerms []CancellationTerm `json:"cancellation_terms,omitempty"`
	// Refund terms of this item
	RefundTerms []RefundTerm `json:"refund_terms,omitempty"`
	// Terms that are applicable be met when this item is replaced
	ReplacementTerms []ReplacementTerm `json:"replacement_terms,omitempty"`
	// Terms that are applicable when this item is returned
	ReturnTerms []ReturnTerm `json:"return_terms,omitempty"`
	// Additional input required from the customer to purchase / avail this item
	Xinput *XInput `json:"xinput,omitempty"`
	// Temporal attributes of this item. This property is used when the item exists on the catalog only for a limited period of time.
	Time *Time `json:"time,omitempty"`
	// Whether this item can be rated
	Rateable *bool `json:"rateable,omitempty"`
	// The rating of the item
	Rating *string `json:"rating,omitempty"`
	// Whether this item is an exact match of the request
	Matched *bool `json:"matched,omitempty"`
	// Whether this item is a related item to the exactly matched item
	Related *bool `json:"related,omitempty"`
	// Whether this item is a recommended item to a response
	Recommended *bool `json:"recommended,omitempty"`
	// Time to live in seconds for an instance of this schema
	Ttl *string `json:"ttl,omitempty"`
	Tags []TagGroup `json:"tags,omitempty"`
}

// NewItem instantiates a new Item object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItem() *Item {
	this := Item{}
	return &this
}

// NewItemWithDefaults instantiates a new Item object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithDefaults() *Item {
	this := Item{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Item) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Item) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Item) SetId(v string) {
	o.Id = &v
}

// GetParentItemId returns the ParentItemId field value if set, zero value otherwise.
func (o *Item) GetParentItemId() string {
	if o == nil || IsNil(o.ParentItemId) {
		var ret string
		return ret
	}
	return *o.ParentItemId
}

// GetParentItemIdOk returns a tuple with the ParentItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetParentItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentItemId) {
		return nil, false
	}
	return o.ParentItemId, true
}

// HasParentItemId returns a boolean if a field has been set.
func (o *Item) HasParentItemId() bool {
	if o != nil && !IsNil(o.ParentItemId) {
		return true
	}

	return false
}

// SetParentItemId gets a reference to the given string and assigns it to the ParentItemId field.
func (o *Item) SetParentItemId(v string) {
	o.ParentItemId = &v
}

// GetParentItemQuantity returns the ParentItemQuantity field value if set, zero value otherwise.
func (o *Item) GetParentItemQuantity() ItemQuantity {
	if o == nil || IsNil(o.ParentItemQuantity) {
		var ret ItemQuantity
		return ret
	}
	return *o.ParentItemQuantity
}

// GetParentItemQuantityOk returns a tuple with the ParentItemQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetParentItemQuantityOk() (*ItemQuantity, bool) {
	if o == nil || IsNil(o.ParentItemQuantity) {
		return nil, false
	}
	return o.ParentItemQuantity, true
}

// HasParentItemQuantity returns a boolean if a field has been set.
func (o *Item) HasParentItemQuantity() bool {
	if o != nil && !IsNil(o.ParentItemQuantity) {
		return true
	}

	return false
}

// SetParentItemQuantity gets a reference to the given ItemQuantity and assigns it to the ParentItemQuantity field.
func (o *Item) SetParentItemQuantity(v ItemQuantity) {
	o.ParentItemQuantity = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *Item) GetDescriptor() Descriptor {
	if o == nil || IsNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *Item) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *Item) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *Item) GetCreator() Organization {
	if o == nil || IsNil(o.Creator) {
		var ret Organization
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetCreatorOk() (*Organization, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *Item) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given Organization and assigns it to the Creator field.
func (o *Item) SetCreator(v Organization) {
	o.Creator = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Item) GetPrice() Price {
	if o == nil || IsNil(o.Price) {
		var ret Price
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetPriceOk() (*Price, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Item) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given Price and assigns it to the Price field.
func (o *Item) SetPrice(v Price) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Item) GetQuantity() ItemQuantity {
	if o == nil || IsNil(o.Quantity) {
		var ret ItemQuantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetQuantityOk() (*ItemQuantity, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Item) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given ItemQuantity and assigns it to the Quantity field.
func (o *Item) SetQuantity(v ItemQuantity) {
	o.Quantity = &v
}

// GetCategoryIds returns the CategoryIds field value if set, zero value otherwise.
func (o *Item) GetCategoryIds() []string {
	if o == nil || IsNil(o.CategoryIds) {
		var ret []string
		return ret
	}
	return o.CategoryIds
}

// GetCategoryIdsOk returns a tuple with the CategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetCategoryIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CategoryIds) {
		return nil, false
	}
	return o.CategoryIds, true
}

// HasCategoryIds returns a boolean if a field has been set.
func (o *Item) HasCategoryIds() bool {
	if o != nil && !IsNil(o.CategoryIds) {
		return true
	}

	return false
}

// SetCategoryIds gets a reference to the given []string and assigns it to the CategoryIds field.
func (o *Item) SetCategoryIds(v []string) {
	o.CategoryIds = v
}

// GetFulfillmentIds returns the FulfillmentIds field value if set, zero value otherwise.
func (o *Item) GetFulfillmentIds() []string {
	if o == nil || IsNil(o.FulfillmentIds) {
		var ret []string
		return ret
	}
	return o.FulfillmentIds
}

// GetFulfillmentIdsOk returns a tuple with the FulfillmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetFulfillmentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FulfillmentIds) {
		return nil, false
	}
	return o.FulfillmentIds, true
}

// HasFulfillmentIds returns a boolean if a field has been set.
func (o *Item) HasFulfillmentIds() bool {
	if o != nil && !IsNil(o.FulfillmentIds) {
		return true
	}

	return false
}

// SetFulfillmentIds gets a reference to the given []string and assigns it to the FulfillmentIds field.
func (o *Item) SetFulfillmentIds(v []string) {
	o.FulfillmentIds = v
}

// GetLocationIds returns the LocationIds field value if set, zero value otherwise.
func (o *Item) GetLocationIds() []string {
	if o == nil || IsNil(o.LocationIds) {
		var ret []string
		return ret
	}
	return o.LocationIds
}

// GetLocationIdsOk returns a tuple with the LocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetLocationIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LocationIds) {
		return nil, false
	}
	return o.LocationIds, true
}

// HasLocationIds returns a boolean if a field has been set.
func (o *Item) HasLocationIds() bool {
	if o != nil && !IsNil(o.LocationIds) {
		return true
	}

	return false
}

// SetLocationIds gets a reference to the given []string and assigns it to the LocationIds field.
func (o *Item) SetLocationIds(v []string) {
	o.LocationIds = v
}

// GetPaymentIds returns the PaymentIds field value if set, zero value otherwise.
func (o *Item) GetPaymentIds() []string {
	if o == nil || IsNil(o.PaymentIds) {
		var ret []string
		return ret
	}
	return o.PaymentIds
}

// GetPaymentIdsOk returns a tuple with the PaymentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetPaymentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PaymentIds) {
		return nil, false
	}
	return o.PaymentIds, true
}

// HasPaymentIds returns a boolean if a field has been set.
func (o *Item) HasPaymentIds() bool {
	if o != nil && !IsNil(o.PaymentIds) {
		return true
	}

	return false
}

// SetPaymentIds gets a reference to the given []string and assigns it to the PaymentIds field.
func (o *Item) SetPaymentIds(v []string) {
	o.PaymentIds = v
}

// GetAddOns returns the AddOns field value if set, zero value otherwise.
func (o *Item) GetAddOns() []AddOn {
	if o == nil || IsNil(o.AddOns) {
		var ret []AddOn
		return ret
	}
	return o.AddOns
}

// GetAddOnsOk returns a tuple with the AddOns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetAddOnsOk() ([]AddOn, bool) {
	if o == nil || IsNil(o.AddOns) {
		return nil, false
	}
	return o.AddOns, true
}

// HasAddOns returns a boolean if a field has been set.
func (o *Item) HasAddOns() bool {
	if o != nil && !IsNil(o.AddOns) {
		return true
	}

	return false
}

// SetAddOns gets a reference to the given []AddOn and assigns it to the AddOns field.
func (o *Item) SetAddOns(v []AddOn) {
	o.AddOns = v
}

// GetCancellationTerms returns the CancellationTerms field value if set, zero value otherwise.
func (o *Item) GetCancellationTerms() []CancellationTerm {
	if o == nil || IsNil(o.CancellationTerms) {
		var ret []CancellationTerm
		return ret
	}
	return o.CancellationTerms
}

// GetCancellationTermsOk returns a tuple with the CancellationTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetCancellationTermsOk() ([]CancellationTerm, bool) {
	if o == nil || IsNil(o.CancellationTerms) {
		return nil, false
	}
	return o.CancellationTerms, true
}

// HasCancellationTerms returns a boolean if a field has been set.
func (o *Item) HasCancellationTerms() bool {
	if o != nil && !IsNil(o.CancellationTerms) {
		return true
	}

	return false
}

// SetCancellationTerms gets a reference to the given []CancellationTerm and assigns it to the CancellationTerms field.
func (o *Item) SetCancellationTerms(v []CancellationTerm) {
	o.CancellationTerms = v
}

// GetRefundTerms returns the RefundTerms field value if set, zero value otherwise.
func (o *Item) GetRefundTerms() []RefundTerm {
	if o == nil || IsNil(o.RefundTerms) {
		var ret []RefundTerm
		return ret
	}
	return o.RefundTerms
}

// GetRefundTermsOk returns a tuple with the RefundTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetRefundTermsOk() ([]RefundTerm, bool) {
	if o == nil || IsNil(o.RefundTerms) {
		return nil, false
	}
	return o.RefundTerms, true
}

// HasRefundTerms returns a boolean if a field has been set.
func (o *Item) HasRefundTerms() bool {
	if o != nil && !IsNil(o.RefundTerms) {
		return true
	}

	return false
}

// SetRefundTerms gets a reference to the given []RefundTerm and assigns it to the RefundTerms field.
func (o *Item) SetRefundTerms(v []RefundTerm) {
	o.RefundTerms = v
}

// GetReplacementTerms returns the ReplacementTerms field value if set, zero value otherwise.
func (o *Item) GetReplacementTerms() []ReplacementTerm {
	if o == nil || IsNil(o.ReplacementTerms) {
		var ret []ReplacementTerm
		return ret
	}
	return o.ReplacementTerms
}

// GetReplacementTermsOk returns a tuple with the ReplacementTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetReplacementTermsOk() ([]ReplacementTerm, bool) {
	if o == nil || IsNil(o.ReplacementTerms) {
		return nil, false
	}
	return o.ReplacementTerms, true
}

// HasReplacementTerms returns a boolean if a field has been set.
func (o *Item) HasReplacementTerms() bool {
	if o != nil && !IsNil(o.ReplacementTerms) {
		return true
	}

	return false
}

// SetReplacementTerms gets a reference to the given []ReplacementTerm and assigns it to the ReplacementTerms field.
func (o *Item) SetReplacementTerms(v []ReplacementTerm) {
	o.ReplacementTerms = v
}

// GetReturnTerms returns the ReturnTerms field value if set, zero value otherwise.
func (o *Item) GetReturnTerms() []ReturnTerm {
	if o == nil || IsNil(o.ReturnTerms) {
		var ret []ReturnTerm
		return ret
	}
	return o.ReturnTerms
}

// GetReturnTermsOk returns a tuple with the ReturnTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetReturnTermsOk() ([]ReturnTerm, bool) {
	if o == nil || IsNil(o.ReturnTerms) {
		return nil, false
	}
	return o.ReturnTerms, true
}

// HasReturnTerms returns a boolean if a field has been set.
func (o *Item) HasReturnTerms() bool {
	if o != nil && !IsNil(o.ReturnTerms) {
		return true
	}

	return false
}

// SetReturnTerms gets a reference to the given []ReturnTerm and assigns it to the ReturnTerms field.
func (o *Item) SetReturnTerms(v []ReturnTerm) {
	o.ReturnTerms = v
}

// GetXinput returns the Xinput field value if set, zero value otherwise.
func (o *Item) GetXinput() XInput {
	if o == nil || IsNil(o.Xinput) {
		var ret XInput
		return ret
	}
	return *o.Xinput
}

// GetXinputOk returns a tuple with the Xinput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetXinputOk() (*XInput, bool) {
	if o == nil || IsNil(o.Xinput) {
		return nil, false
	}
	return o.Xinput, true
}

// HasXinput returns a boolean if a field has been set.
func (o *Item) HasXinput() bool {
	if o != nil && !IsNil(o.Xinput) {
		return true
	}

	return false
}

// SetXinput gets a reference to the given XInput and assigns it to the Xinput field.
func (o *Item) SetXinput(v XInput) {
	o.Xinput = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Item) GetTime() Time {
	if o == nil || IsNil(o.Time) {
		var ret Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Item) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given Time and assigns it to the Time field.
func (o *Item) SetTime(v Time) {
	o.Time = &v
}

// GetRateable returns the Rateable field value if set, zero value otherwise.
func (o *Item) GetRateable() bool {
	if o == nil || IsNil(o.Rateable) {
		var ret bool
		return ret
	}
	return *o.Rateable
}

// GetRateableOk returns a tuple with the Rateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetRateableOk() (*bool, bool) {
	if o == nil || IsNil(o.Rateable) {
		return nil, false
	}
	return o.Rateable, true
}

// HasRateable returns a boolean if a field has been set.
func (o *Item) HasRateable() bool {
	if o != nil && !IsNil(o.Rateable) {
		return true
	}

	return false
}

// SetRateable gets a reference to the given bool and assigns it to the Rateable field.
func (o *Item) SetRateable(v bool) {
	o.Rateable = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *Item) GetRating() string {
	if o == nil || IsNil(o.Rating) {
		var ret string
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetRatingOk() (*string, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *Item) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given string and assigns it to the Rating field.
func (o *Item) SetRating(v string) {
	o.Rating = &v
}

// GetMatched returns the Matched field value if set, zero value otherwise.
func (o *Item) GetMatched() bool {
	if o == nil || IsNil(o.Matched) {
		var ret bool
		return ret
	}
	return *o.Matched
}

// GetMatchedOk returns a tuple with the Matched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetMatchedOk() (*bool, bool) {
	if o == nil || IsNil(o.Matched) {
		return nil, false
	}
	return o.Matched, true
}

// HasMatched returns a boolean if a field has been set.
func (o *Item) HasMatched() bool {
	if o != nil && !IsNil(o.Matched) {
		return true
	}

	return false
}

// SetMatched gets a reference to the given bool and assigns it to the Matched field.
func (o *Item) SetMatched(v bool) {
	o.Matched = &v
}

// GetRelated returns the Related field value if set, zero value otherwise.
func (o *Item) GetRelated() bool {
	if o == nil || IsNil(o.Related) {
		var ret bool
		return ret
	}
	return *o.Related
}

// GetRelatedOk returns a tuple with the Related field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetRelatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Related) {
		return nil, false
	}
	return o.Related, true
}

// HasRelated returns a boolean if a field has been set.
func (o *Item) HasRelated() bool {
	if o != nil && !IsNil(o.Related) {
		return true
	}

	return false
}

// SetRelated gets a reference to the given bool and assigns it to the Related field.
func (o *Item) SetRelated(v bool) {
	o.Related = &v
}

// GetRecommended returns the Recommended field value if set, zero value otherwise.
func (o *Item) GetRecommended() bool {
	if o == nil || IsNil(o.Recommended) {
		var ret bool
		return ret
	}
	return *o.Recommended
}

// GetRecommendedOk returns a tuple with the Recommended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetRecommendedOk() (*bool, bool) {
	if o == nil || IsNil(o.Recommended) {
		return nil, false
	}
	return o.Recommended, true
}

// HasRecommended returns a boolean if a field has been set.
func (o *Item) HasRecommended() bool {
	if o != nil && !IsNil(o.Recommended) {
		return true
	}

	return false
}

// SetRecommended gets a reference to the given bool and assigns it to the Recommended field.
func (o *Item) SetRecommended(v bool) {
	o.Recommended = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Item) GetTtl() string {
	if o == nil || IsNil(o.Ttl) {
		var ret string
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetTtlOk() (*string, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Item) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given string and assigns it to the Ttl field.
func (o *Item) SetTtl(v string) {
	o.Ttl = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Item) GetTags() []TagGroup {
	if o == nil || IsNil(o.Tags) {
		var ret []TagGroup
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetTagsOk() ([]TagGroup, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Item) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagGroup and assigns it to the Tags field.
func (o *Item) SetTags(v []TagGroup) {
	o.Tags = v
}

func (o Item) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Item) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParentItemId) {
		toSerialize["parent_item_id"] = o.ParentItemId
	}
	if !IsNil(o.ParentItemQuantity) {
		toSerialize["parent_item_quantity"] = o.ParentItemQuantity
	}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.CategoryIds) {
		toSerialize["category_ids"] = o.CategoryIds
	}
	if !IsNil(o.FulfillmentIds) {
		toSerialize["fulfillment_ids"] = o.FulfillmentIds
	}
	if !IsNil(o.LocationIds) {
		toSerialize["location_ids"] = o.LocationIds
	}
	if !IsNil(o.PaymentIds) {
		toSerialize["payment_ids"] = o.PaymentIds
	}
	if !IsNil(o.AddOns) {
		toSerialize["add_ons"] = o.AddOns
	}
	if !IsNil(o.CancellationTerms) {
		toSerialize["cancellation_terms"] = o.CancellationTerms
	}
	if !IsNil(o.RefundTerms) {
		toSerialize["refund_terms"] = o.RefundTerms
	}
	if !IsNil(o.ReplacementTerms) {
		toSerialize["replacement_terms"] = o.ReplacementTerms
	}
	if !IsNil(o.ReturnTerms) {
		toSerialize["return_terms"] = o.ReturnTerms
	}
	if !IsNil(o.Xinput) {
		toSerialize["xinput"] = o.Xinput
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Rateable) {
		toSerialize["rateable"] = o.Rateable
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.Matched) {
		toSerialize["matched"] = o.Matched
	}
	if !IsNil(o.Related) {
		toSerialize["related"] = o.Related
	}
	if !IsNil(o.Recommended) {
		toSerialize["recommended"] = o.Recommended
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableItem struct {
	value *Item
	isSet bool
}

func (v NullableItem) Get() *Item {
	return v.value
}

func (v *NullableItem) Set(val *Item) {
	v.value = val
	v.isSet = true
}

func (v NullableItem) IsSet() bool {
	return v.isSet
}

func (v *NullableItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItem(val *Item) *NullableItem {
	return &NullableItem{value: val, isSet: true}
}

func (v NullableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


