/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnSupport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnSupport{}

// OnSupport struct for OnSupport
type OnSupport struct {
	Context OnSupportContext `json:"context"`
	Message *Support2Message `json:"message,omitempty"`
	Error *Error `json:"error,omitempty"`
}

type _OnSupport OnSupport

// NewOnSupport instantiates a new OnSupport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnSupport(context OnSupportContext) *OnSupport {
	this := OnSupport{}
	this.Context = context
	return &this
}

// NewOnSupportWithDefaults instantiates a new OnSupport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnSupportWithDefaults() *OnSupport {
	this := OnSupport{}
	return &this
}

// GetContext returns the Context field value
func (o *OnSupport) GetContext() OnSupportContext {
	if o == nil {
		var ret OnSupportContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *OnSupport) GetContextOk() (*OnSupportContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *OnSupport) SetContext(v OnSupportContext) {
	o.Context = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *OnSupport) GetMessage() Support2Message {
	if o == nil || IsNil(o.Message) {
		var ret Support2Message
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnSupport) GetMessageOk() (*Support2Message, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *OnSupport) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given Support2Message and assigns it to the Message field.
func (o *OnSupport) SetMessage(v Support2Message) {
	o.Message = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *OnSupport) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnSupport) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *OnSupport) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *OnSupport) SetError(v Error) {
	o.Error = &v
}

func (o OnSupport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnSupport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *OnSupport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnSupport := _OnSupport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnSupport)

	if err != nil {
		return err
	}

	*o = OnSupport(varOnSupport)

	return err
}

type NullableOnSupport struct {
	value *OnSupport
	isSet bool
}

func (v NullableOnSupport) Get() *OnSupport {
	return v.value
}

func (v *NullableOnSupport) Set(val *OnSupport) {
	v.value = val
	v.isSet = true
}

func (v NullableOnSupport) IsSet() bool {
	return v.isSet
}

func (v *NullableOnSupport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnSupport(val *OnSupport) *NullableOnSupport {
	return &NullableOnSupport{value: val, isSet: true}
}

func (v NullableOnSupport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnSupport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


