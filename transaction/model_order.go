/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"time"
)

// checks if the Order type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Order{}

// Order Describes a legal purchase order. It contains the complete details of the legal contract created between the buyer and the seller.
type Order struct {
	// Human-readable ID of the order. This is generated at the BPP layer. The BPP can either generate order id within its system or forward the order ID created at the provider level.
	Id *string `json:"id,omitempty"`
	// A list of order IDs to link this order to previous orders.
	RefOrderIds []string `json:"ref_order_ids,omitempty"`
	// Status of the order. Allowed values can be defined by the network policy
	Status *string `json:"status,omitempty"`
	// This is used to indicate the type of order being created to BPPs. Sometimes orders can be linked to previous orders, like a replacement order in a retail domain. A follow-up consultation in healthcare domain. A single order part of a subscription order. The list of order types can be standardized at the network level.
	Type *string `json:"type,omitempty"`
	// Details of the provider whose catalog items have been selected.
	Provider *Provider `json:"provider,omitempty"`
	// The items purchased / availed in this order
	Items []Item `json:"items,omitempty"`
	// The add-ons purchased / availed in this order
	AddOns []AddOn `json:"add_ons,omitempty"`
	// The offers applied in this order
	Offers []Offer `json:"offers,omitempty"`
	// The billing details of this order
	Billing *Billing `json:"billing,omitempty"`
	// The fulfillments involved in completing this order
	Fulfillments []Fulfillment `json:"fulfillments,omitempty"`
	// The cancellation details of this order
	Cancellation *Cancellation `json:"cancellation,omitempty"`
	// Cancellation terms of this item
	CancellationTerms []CancellationTerm `json:"cancellation_terms,omitempty"`
	// Refund terms of this item
	RefundTerms []RefundTerm `json:"refund_terms,omitempty"`
	// Replacement terms of this item
	ReplacementTerms []ReplacementTerm `json:"replacement_terms,omitempty"`
	// Return terms of this item
	ReturnTerms []ReturnTerm `json:"return_terms,omitempty"`
	// The mutually agreed upon quotation for this order.
	Quote *Quotation `json:"quote,omitempty"`
	// The terms of settlement for this order
	Payments []Payment `json:"payments,omitempty"`
	// The date-time of creation of this order
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date-time of updated of this order
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Additional input required from the customer to confirm this order
	Xinput *XInput `json:"xinput,omitempty"`
	Tags []TagGroup `json:"tags,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	var type_ string = "DEFAULT"
	this.Type = &type_
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	var type_ string = "DEFAULT"
	this.Type = &type_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Order) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Order) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Order) SetId(v string) {
	o.Id = &v
}

// GetRefOrderIds returns the RefOrderIds field value if set, zero value otherwise.
func (o *Order) GetRefOrderIds() []string {
	if o == nil || IsNil(o.RefOrderIds) {
		var ret []string
		return ret
	}
	return o.RefOrderIds
}

// GetRefOrderIdsOk returns a tuple with the RefOrderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRefOrderIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RefOrderIds) {
		return nil, false
	}
	return o.RefOrderIds, true
}

// HasRefOrderIds returns a boolean if a field has been set.
func (o *Order) HasRefOrderIds() bool {
	if o != nil && !IsNil(o.RefOrderIds) {
		return true
	}

	return false
}

// SetRefOrderIds gets a reference to the given []string and assigns it to the RefOrderIds field.
func (o *Order) SetRefOrderIds(v []string) {
	o.RefOrderIds = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Order) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Order) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Order) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Order) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Order) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Order) SetType(v string) {
	o.Type = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Order) GetProvider() Provider {
	if o == nil || IsNil(o.Provider) {
		var ret Provider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetProviderOk() (*Provider, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Order) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given Provider and assigns it to the Provider field.
func (o *Order) SetProvider(v Provider) {
	o.Provider = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Order) GetItems() []Item {
	if o == nil || IsNil(o.Items) {
		var ret []Item
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetItemsOk() ([]Item, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Order) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Item and assigns it to the Items field.
func (o *Order) SetItems(v []Item) {
	o.Items = v
}

// GetAddOns returns the AddOns field value if set, zero value otherwise.
func (o *Order) GetAddOns() []AddOn {
	if o == nil || IsNil(o.AddOns) {
		var ret []AddOn
		return ret
	}
	return o.AddOns
}

// GetAddOnsOk returns a tuple with the AddOns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAddOnsOk() ([]AddOn, bool) {
	if o == nil || IsNil(o.AddOns) {
		return nil, false
	}
	return o.AddOns, true
}

// HasAddOns returns a boolean if a field has been set.
func (o *Order) HasAddOns() bool {
	if o != nil && !IsNil(o.AddOns) {
		return true
	}

	return false
}

// SetAddOns gets a reference to the given []AddOn and assigns it to the AddOns field.
func (o *Order) SetAddOns(v []AddOn) {
	o.AddOns = v
}

// GetOffers returns the Offers field value if set, zero value otherwise.
func (o *Order) GetOffers() []Offer {
	if o == nil || IsNil(o.Offers) {
		var ret []Offer
		return ret
	}
	return o.Offers
}

// GetOffersOk returns a tuple with the Offers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOffersOk() ([]Offer, bool) {
	if o == nil || IsNil(o.Offers) {
		return nil, false
	}
	return o.Offers, true
}

// HasOffers returns a boolean if a field has been set.
func (o *Order) HasOffers() bool {
	if o != nil && !IsNil(o.Offers) {
		return true
	}

	return false
}

// SetOffers gets a reference to the given []Offer and assigns it to the Offers field.
func (o *Order) SetOffers(v []Offer) {
	o.Offers = v
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *Order) GetBilling() Billing {
	if o == nil || IsNil(o.Billing) {
		var ret Billing
		return ret
	}
	return *o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBillingOk() (*Billing, bool) {
	if o == nil || IsNil(o.Billing) {
		return nil, false
	}
	return o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *Order) HasBilling() bool {
	if o != nil && !IsNil(o.Billing) {
		return true
	}

	return false
}

// SetBilling gets a reference to the given Billing and assigns it to the Billing field.
func (o *Order) SetBilling(v Billing) {
	o.Billing = &v
}

// GetFulfillments returns the Fulfillments field value if set, zero value otherwise.
func (o *Order) GetFulfillments() []Fulfillment {
	if o == nil || IsNil(o.Fulfillments) {
		var ret []Fulfillment
		return ret
	}
	return o.Fulfillments
}

// GetFulfillmentsOk returns a tuple with the Fulfillments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFulfillmentsOk() ([]Fulfillment, bool) {
	if o == nil || IsNil(o.Fulfillments) {
		return nil, false
	}
	return o.Fulfillments, true
}

// HasFulfillments returns a boolean if a field has been set.
func (o *Order) HasFulfillments() bool {
	if o != nil && !IsNil(o.Fulfillments) {
		return true
	}

	return false
}

// SetFulfillments gets a reference to the given []Fulfillment and assigns it to the Fulfillments field.
func (o *Order) SetFulfillments(v []Fulfillment) {
	o.Fulfillments = v
}

// GetCancellation returns the Cancellation field value if set, zero value otherwise.
func (o *Order) GetCancellation() Cancellation {
	if o == nil || IsNil(o.Cancellation) {
		var ret Cancellation
		return ret
	}
	return *o.Cancellation
}

// GetCancellationOk returns a tuple with the Cancellation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCancellationOk() (*Cancellation, bool) {
	if o == nil || IsNil(o.Cancellation) {
		return nil, false
	}
	return o.Cancellation, true
}

// HasCancellation returns a boolean if a field has been set.
func (o *Order) HasCancellation() bool {
	if o != nil && !IsNil(o.Cancellation) {
		return true
	}

	return false
}

// SetCancellation gets a reference to the given Cancellation and assigns it to the Cancellation field.
func (o *Order) SetCancellation(v Cancellation) {
	o.Cancellation = &v
}

// GetCancellationTerms returns the CancellationTerms field value if set, zero value otherwise.
func (o *Order) GetCancellationTerms() []CancellationTerm {
	if o == nil || IsNil(o.CancellationTerms) {
		var ret []CancellationTerm
		return ret
	}
	return o.CancellationTerms
}

// GetCancellationTermsOk returns a tuple with the CancellationTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCancellationTermsOk() ([]CancellationTerm, bool) {
	if o == nil || IsNil(o.CancellationTerms) {
		return nil, false
	}
	return o.CancellationTerms, true
}

// HasCancellationTerms returns a boolean if a field has been set.
func (o *Order) HasCancellationTerms() bool {
	if o != nil && !IsNil(o.CancellationTerms) {
		return true
	}

	return false
}

// SetCancellationTerms gets a reference to the given []CancellationTerm and assigns it to the CancellationTerms field.
func (o *Order) SetCancellationTerms(v []CancellationTerm) {
	o.CancellationTerms = v
}

// GetRefundTerms returns the RefundTerms field value if set, zero value otherwise.
func (o *Order) GetRefundTerms() []RefundTerm {
	if o == nil || IsNil(o.RefundTerms) {
		var ret []RefundTerm
		return ret
	}
	return o.RefundTerms
}

// GetRefundTermsOk returns a tuple with the RefundTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRefundTermsOk() ([]RefundTerm, bool) {
	if o == nil || IsNil(o.RefundTerms) {
		return nil, false
	}
	return o.RefundTerms, true
}

// HasRefundTerms returns a boolean if a field has been set.
func (o *Order) HasRefundTerms() bool {
	if o != nil && !IsNil(o.RefundTerms) {
		return true
	}

	return false
}

// SetRefundTerms gets a reference to the given []RefundTerm and assigns it to the RefundTerms field.
func (o *Order) SetRefundTerms(v []RefundTerm) {
	o.RefundTerms = v
}

// GetReplacementTerms returns the ReplacementTerms field value if set, zero value otherwise.
func (o *Order) GetReplacementTerms() []ReplacementTerm {
	if o == nil || IsNil(o.ReplacementTerms) {
		var ret []ReplacementTerm
		return ret
	}
	return o.ReplacementTerms
}

// GetReplacementTermsOk returns a tuple with the ReplacementTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetReplacementTermsOk() ([]ReplacementTerm, bool) {
	if o == nil || IsNil(o.ReplacementTerms) {
		return nil, false
	}
	return o.ReplacementTerms, true
}

// HasReplacementTerms returns a boolean if a field has been set.
func (o *Order) HasReplacementTerms() bool {
	if o != nil && !IsNil(o.ReplacementTerms) {
		return true
	}

	return false
}

// SetReplacementTerms gets a reference to the given []ReplacementTerm and assigns it to the ReplacementTerms field.
func (o *Order) SetReplacementTerms(v []ReplacementTerm) {
	o.ReplacementTerms = v
}

// GetReturnTerms returns the ReturnTerms field value if set, zero value otherwise.
func (o *Order) GetReturnTerms() []ReturnTerm {
	if o == nil || IsNil(o.ReturnTerms) {
		var ret []ReturnTerm
		return ret
	}
	return o.ReturnTerms
}

// GetReturnTermsOk returns a tuple with the ReturnTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetReturnTermsOk() ([]ReturnTerm, bool) {
	if o == nil || IsNil(o.ReturnTerms) {
		return nil, false
	}
	return o.ReturnTerms, true
}

// HasReturnTerms returns a boolean if a field has been set.
func (o *Order) HasReturnTerms() bool {
	if o != nil && !IsNil(o.ReturnTerms) {
		return true
	}

	return false
}

// SetReturnTerms gets a reference to the given []ReturnTerm and assigns it to the ReturnTerms field.
func (o *Order) SetReturnTerms(v []ReturnTerm) {
	o.ReturnTerms = v
}

// GetQuote returns the Quote field value if set, zero value otherwise.
func (o *Order) GetQuote() Quotation {
	if o == nil || IsNil(o.Quote) {
		var ret Quotation
		return ret
	}
	return *o.Quote
}

// GetQuoteOk returns a tuple with the Quote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQuoteOk() (*Quotation, bool) {
	if o == nil || IsNil(o.Quote) {
		return nil, false
	}
	return o.Quote, true
}

// HasQuote returns a boolean if a field has been set.
func (o *Order) HasQuote() bool {
	if o != nil && !IsNil(o.Quote) {
		return true
	}

	return false
}

// SetQuote gets a reference to the given Quotation and assigns it to the Quote field.
func (o *Order) SetQuote(v Quotation) {
	o.Quote = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *Order) GetPayments() []Payment {
	if o == nil || IsNil(o.Payments) {
		var ret []Payment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPaymentsOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *Order) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []Payment and assigns it to the Payments field.
func (o *Order) SetPayments(v []Payment) {
	o.Payments = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Order) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Order) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Order) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Order) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Order) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Order) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetXinput returns the Xinput field value if set, zero value otherwise.
func (o *Order) GetXinput() XInput {
	if o == nil || IsNil(o.Xinput) {
		var ret XInput
		return ret
	}
	return *o.Xinput
}

// GetXinputOk returns a tuple with the Xinput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetXinputOk() (*XInput, bool) {
	if o == nil || IsNil(o.Xinput) {
		return nil, false
	}
	return o.Xinput, true
}

// HasXinput returns a boolean if a field has been set.
func (o *Order) HasXinput() bool {
	if o != nil && !IsNil(o.Xinput) {
		return true
	}

	return false
}

// SetXinput gets a reference to the given XInput and assigns it to the Xinput field.
func (o *Order) SetXinput(v XInput) {
	o.Xinput = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Order) GetTags() []TagGroup {
	if o == nil || IsNil(o.Tags) {
		var ret []TagGroup
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTagsOk() ([]TagGroup, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Order) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagGroup and assigns it to the Tags field.
func (o *Order) SetTags(v []TagGroup) {
	o.Tags = v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Order) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RefOrderIds) {
		toSerialize["ref_order_ids"] = o.RefOrderIds
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.AddOns) {
		toSerialize["add_ons"] = o.AddOns
	}
	if !IsNil(o.Offers) {
		toSerialize["offers"] = o.Offers
	}
	if !IsNil(o.Billing) {
		toSerialize["billing"] = o.Billing
	}
	if !IsNil(o.Fulfillments) {
		toSerialize["fulfillments"] = o.Fulfillments
	}
	if !IsNil(o.Cancellation) {
		toSerialize["cancellation"] = o.Cancellation
	}
	if !IsNil(o.CancellationTerms) {
		toSerialize["cancellation_terms"] = o.CancellationTerms
	}
	if !IsNil(o.RefundTerms) {
		toSerialize["refund_terms"] = o.RefundTerms
	}
	if !IsNil(o.ReplacementTerms) {
		toSerialize["replacement_terms"] = o.ReplacementTerms
	}
	if !IsNil(o.ReturnTerms) {
		toSerialize["return_terms"] = o.ReturnTerms
	}
	if !IsNil(o.Quote) {
		toSerialize["quote"] = o.Quote
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Xinput) {
		toSerialize["xinput"] = o.Xinput
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


