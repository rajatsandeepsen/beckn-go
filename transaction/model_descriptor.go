/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Descriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Descriptor{}

// Descriptor Physical description of something.
type Descriptor struct {
	Name *string `json:"name,omitempty"`
	Code *string `json:"code,omitempty"`
	ShortDesc *string `json:"short_desc,omitempty"`
	LongDesc *string `json:"long_desc,omitempty"`
	AdditionalDesc *DescriptorAdditionalDesc `json:"additional_desc,omitempty"`
	Media []MediaFile `json:"media,omitempty"`
	Images []Image `json:"images,omitempty"`
}

// NewDescriptor instantiates a new Descriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescriptor() *Descriptor {
	this := Descriptor{}
	return &this
}

// NewDescriptorWithDefaults instantiates a new Descriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptorWithDefaults() *Descriptor {
	this := Descriptor{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Descriptor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Descriptor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Descriptor) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Descriptor) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Descriptor) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Descriptor) SetCode(v string) {
	o.Code = &v
}

// GetShortDesc returns the ShortDesc field value if set, zero value otherwise.
func (o *Descriptor) GetShortDesc() string {
	if o == nil || IsNil(o.ShortDesc) {
		var ret string
		return ret
	}
	return *o.ShortDesc
}

// GetShortDescOk returns a tuple with the ShortDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetShortDescOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDesc) {
		return nil, false
	}
	return o.ShortDesc, true
}

// HasShortDesc returns a boolean if a field has been set.
func (o *Descriptor) HasShortDesc() bool {
	if o != nil && !IsNil(o.ShortDesc) {
		return true
	}

	return false
}

// SetShortDesc gets a reference to the given string and assigns it to the ShortDesc field.
func (o *Descriptor) SetShortDesc(v string) {
	o.ShortDesc = &v
}

// GetLongDesc returns the LongDesc field value if set, zero value otherwise.
func (o *Descriptor) GetLongDesc() string {
	if o == nil || IsNil(o.LongDesc) {
		var ret string
		return ret
	}
	return *o.LongDesc
}

// GetLongDescOk returns a tuple with the LongDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetLongDescOk() (*string, bool) {
	if o == nil || IsNil(o.LongDesc) {
		return nil, false
	}
	return o.LongDesc, true
}

// HasLongDesc returns a boolean if a field has been set.
func (o *Descriptor) HasLongDesc() bool {
	if o != nil && !IsNil(o.LongDesc) {
		return true
	}

	return false
}

// SetLongDesc gets a reference to the given string and assigns it to the LongDesc field.
func (o *Descriptor) SetLongDesc(v string) {
	o.LongDesc = &v
}

// GetAdditionalDesc returns the AdditionalDesc field value if set, zero value otherwise.
func (o *Descriptor) GetAdditionalDesc() DescriptorAdditionalDesc {
	if o == nil || IsNil(o.AdditionalDesc) {
		var ret DescriptorAdditionalDesc
		return ret
	}
	return *o.AdditionalDesc
}

// GetAdditionalDescOk returns a tuple with the AdditionalDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetAdditionalDescOk() (*DescriptorAdditionalDesc, bool) {
	if o == nil || IsNil(o.AdditionalDesc) {
		return nil, false
	}
	return o.AdditionalDesc, true
}

// HasAdditionalDesc returns a boolean if a field has been set.
func (o *Descriptor) HasAdditionalDesc() bool {
	if o != nil && !IsNil(o.AdditionalDesc) {
		return true
	}

	return false
}

// SetAdditionalDesc gets a reference to the given DescriptorAdditionalDesc and assigns it to the AdditionalDesc field.
func (o *Descriptor) SetAdditionalDesc(v DescriptorAdditionalDesc) {
	o.AdditionalDesc = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *Descriptor) GetMedia() []MediaFile {
	if o == nil || IsNil(o.Media) {
		var ret []MediaFile
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetMediaOk() ([]MediaFile, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *Descriptor) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []MediaFile and assigns it to the Media field.
func (o *Descriptor) SetMedia(v []MediaFile) {
	o.Media = v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *Descriptor) GetImages() []Image {
	if o == nil || IsNil(o.Images) {
		var ret []Image
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetImagesOk() ([]Image, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *Descriptor) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []Image and assigns it to the Images field.
func (o *Descriptor) SetImages(v []Image) {
	o.Images = v
}

func (o Descriptor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Descriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ShortDesc) {
		toSerialize["short_desc"] = o.ShortDesc
	}
	if !IsNil(o.LongDesc) {
		toSerialize["long_desc"] = o.LongDesc
	}
	if !IsNil(o.AdditionalDesc) {
		toSerialize["additional_desc"] = o.AdditionalDesc
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	return toSerialize, nil
}

type NullableDescriptor struct {
	value *Descriptor
	isSet bool
}

func (v NullableDescriptor) Get() *Descriptor {
	return v.value
}

func (v *NullableDescriptor) Set(val *Descriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescriptor(val *Descriptor) *NullableDescriptor {
	return &NullableDescriptor{value: val, isSet: true}
}

func (v NullableDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


