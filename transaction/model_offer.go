/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Offer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Offer{}

// Offer An offer associated with a catalog. This is typically used to promote a particular product and enable more purchases.
type Offer struct {
	Id *string `json:"id,omitempty"`
	Descriptor *Descriptor `json:"descriptor,omitempty"`
	LocationIds []string `json:"location_ids,omitempty"`
	CategoryIds []string `json:"category_ids,omitempty"`
	ItemIds []string `json:"item_ids,omitempty"`
	Time *Time `json:"time,omitempty"`
	Tags []TagGroup `json:"tags,omitempty"`
}

// NewOffer instantiates a new Offer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffer() *Offer {
	this := Offer{}
	return &this
}

// NewOfferWithDefaults instantiates a new Offer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferWithDefaults() *Offer {
	this := Offer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Offer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Offer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Offer) SetId(v string) {
	o.Id = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *Offer) GetDescriptor() Descriptor {
	if o == nil || IsNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *Offer) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *Offer) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

// GetLocationIds returns the LocationIds field value if set, zero value otherwise.
func (o *Offer) GetLocationIds() []string {
	if o == nil || IsNil(o.LocationIds) {
		var ret []string
		return ret
	}
	return o.LocationIds
}

// GetLocationIdsOk returns a tuple with the LocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetLocationIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LocationIds) {
		return nil, false
	}
	return o.LocationIds, true
}

// HasLocationIds returns a boolean if a field has been set.
func (o *Offer) HasLocationIds() bool {
	if o != nil && !IsNil(o.LocationIds) {
		return true
	}

	return false
}

// SetLocationIds gets a reference to the given []string and assigns it to the LocationIds field.
func (o *Offer) SetLocationIds(v []string) {
	o.LocationIds = v
}

// GetCategoryIds returns the CategoryIds field value if set, zero value otherwise.
func (o *Offer) GetCategoryIds() []string {
	if o == nil || IsNil(o.CategoryIds) {
		var ret []string
		return ret
	}
	return o.CategoryIds
}

// GetCategoryIdsOk returns a tuple with the CategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetCategoryIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CategoryIds) {
		return nil, false
	}
	return o.CategoryIds, true
}

// HasCategoryIds returns a boolean if a field has been set.
func (o *Offer) HasCategoryIds() bool {
	if o != nil && !IsNil(o.CategoryIds) {
		return true
	}

	return false
}

// SetCategoryIds gets a reference to the given []string and assigns it to the CategoryIds field.
func (o *Offer) SetCategoryIds(v []string) {
	o.CategoryIds = v
}

// GetItemIds returns the ItemIds field value if set, zero value otherwise.
func (o *Offer) GetItemIds() []string {
	if o == nil || IsNil(o.ItemIds) {
		var ret []string
		return ret
	}
	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetItemIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ItemIds) {
		return nil, false
	}
	return o.ItemIds, true
}

// HasItemIds returns a boolean if a field has been set.
func (o *Offer) HasItemIds() bool {
	if o != nil && !IsNil(o.ItemIds) {
		return true
	}

	return false
}

// SetItemIds gets a reference to the given []string and assigns it to the ItemIds field.
func (o *Offer) SetItemIds(v []string) {
	o.ItemIds = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Offer) GetTime() Time {
	if o == nil || IsNil(o.Time) {
		var ret Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Offer) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given Time and assigns it to the Time field.
func (o *Offer) SetTime(v Time) {
	o.Time = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Offer) GetTags() []TagGroup {
	if o == nil || IsNil(o.Tags) {
		var ret []TagGroup
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Offer) GetTagsOk() ([]TagGroup, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Offer) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagGroup and assigns it to the Tags field.
func (o *Offer) SetTags(v []TagGroup) {
	o.Tags = v
}

func (o Offer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Offer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !IsNil(o.LocationIds) {
		toSerialize["location_ids"] = o.LocationIds
	}
	if !IsNil(o.CategoryIds) {
		toSerialize["category_ids"] = o.CategoryIds
	}
	if !IsNil(o.ItemIds) {
		toSerialize["item_ids"] = o.ItemIds
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableOffer struct {
	value *Offer
	isSet bool
}

func (v NullableOffer) Get() *Offer {
	return v.value
}

func (v *NullableOffer) Set(val *Offer) {
	v.value = val
	v.isSet = true
}

func (v NullableOffer) IsSet() bool {
	return v.isSet
}

func (v *NullableOffer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffer(val *Offer) *NullableOffer {
	return &NullableOffer{value: val, isSet: true}
}

func (v NullableOffer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


