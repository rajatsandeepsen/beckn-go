/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Support2Message type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Support2Message{}

// Support2Message struct for Support2Message
type Support2Message struct {
	Support *Support `json:"support,omitempty"`
}

// NewSupport2Message instantiates a new Support2Message object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupport2Message() *Support2Message {
	this := Support2Message{}
	return &this
}

// NewSupport2MessageWithDefaults instantiates a new Support2Message object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupport2MessageWithDefaults() *Support2Message {
	this := Support2Message{}
	return &this
}

// GetSupport returns the Support field value if set, zero value otherwise.
func (o *Support2Message) GetSupport() Support {
	if o == nil || IsNil(o.Support) {
		var ret Support
		return ret
	}
	return *o.Support
}

// GetSupportOk returns a tuple with the Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Support2Message) GetSupportOk() (*Support, bool) {
	if o == nil || IsNil(o.Support) {
		return nil, false
	}
	return o.Support, true
}

// HasSupport returns a boolean if a field has been set.
func (o *Support2Message) HasSupport() bool {
	if o != nil && !IsNil(o.Support) {
		return true
	}

	return false
}

// SetSupport gets a reference to the given Support and assigns it to the Support field.
func (o *Support2Message) SetSupport(v Support) {
	o.Support = &v
}

func (o Support2Message) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Support2Message) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Support) {
		toSerialize["support"] = o.Support
	}
	return toSerialize, nil
}

type NullableSupport2Message struct {
	value *Support2Message
	isSet bool
}

func (v NullableSupport2Message) Get() *Support2Message {
	return v.value
}

func (v *NullableSupport2Message) Set(val *Support2Message) {
	v.value = val
	v.isSet = true
}

func (v NullableSupport2Message) IsSet() bool {
	return v.isSet
}

func (v *NullableSupport2Message) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupport2Message(val *Support2Message) *NullableSupport2Message {
	return &NullableSupport2Message{value: val, isSet: true}
}

func (v NullableSupport2Message) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupport2Message) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


