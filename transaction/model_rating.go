/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Rating type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rating{}

// Rating Describes the rating of an entity
type Rating struct {
	// Category of the entity being rated
	RatingCategory *string `json:"rating_category,omitempty"`
	// Id of the object being rated
	Id *string `json:"id,omitempty"`
	// Rating value given to the object. This can be a single value or can also contain an inequality operator like gt, gte, lt, lte. This can also contain an inequality expression containing logical operators like && and ||.
	Value *string `json:"value,omitempty"`
}

// NewRating instantiates a new Rating object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRating() *Rating {
	this := Rating{}
	return &this
}

// NewRatingWithDefaults instantiates a new Rating object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatingWithDefaults() *Rating {
	this := Rating{}
	return &this
}

// GetRatingCategory returns the RatingCategory field value if set, zero value otherwise.
func (o *Rating) GetRatingCategory() string {
	if o == nil || IsNil(o.RatingCategory) {
		var ret string
		return ret
	}
	return *o.RatingCategory
}

// GetRatingCategoryOk returns a tuple with the RatingCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetRatingCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.RatingCategory) {
		return nil, false
	}
	return o.RatingCategory, true
}

// HasRatingCategory returns a boolean if a field has been set.
func (o *Rating) HasRatingCategory() bool {
	if o != nil && !IsNil(o.RatingCategory) {
		return true
	}

	return false
}

// SetRatingCategory gets a reference to the given string and assigns it to the RatingCategory field.
func (o *Rating) SetRatingCategory(v string) {
	o.RatingCategory = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Rating) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Rating) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Rating) SetId(v string) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Rating) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Rating) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Rating) SetValue(v string) {
	o.Value = &v
}

func (o Rating) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rating) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatingCategory) {
		toSerialize["rating_category"] = o.RatingCategory
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableRating struct {
	value *Rating
	isSet bool
}

func (v NullableRating) Get() *Rating {
	return v.value
}

func (v *NullableRating) Set(val *Rating) {
	v.value = val
	v.isSet = true
}

func (v NullableRating) IsSet() bool {
	return v.isSet
}

func (v *NullableRating) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRating(val *Rating) *NullableRating {
	return &NullableRating{value: val, isSet: true}
}

func (v NullableRating) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRating) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


