/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the CancellationTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancellationTerm{}

// CancellationTerm Describes the cancellation terms of an item or an order. This can be referenced at an item or order level. Item-level cancellation terms can override the terms at the order level.
type CancellationTerm struct {
	// The state of fulfillment during which this term is applicable.
	FulfillmentState *FulfillmentState `json:"fulfillment_state,omitempty"`
	// Indicates whether a reason is required to cancel the order
	ReasonRequired *bool `json:"reason_required,omitempty"`
	// Information related to the time of cancellation.
	CancelBy *Time `json:"cancel_by,omitempty"`
	CancellationFee *Fee `json:"cancellation_fee,omitempty"`
	Xinput *XInput `json:"xinput,omitempty"`
	ExternalRef *MediaFile `json:"external_ref,omitempty"`
}

// NewCancellationTerm instantiates a new CancellationTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellationTerm() *CancellationTerm {
	this := CancellationTerm{}
	return &this
}

// NewCancellationTermWithDefaults instantiates a new CancellationTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationTermWithDefaults() *CancellationTerm {
	this := CancellationTerm{}
	return &this
}

// GetFulfillmentState returns the FulfillmentState field value if set, zero value otherwise.
func (o *CancellationTerm) GetFulfillmentState() FulfillmentState {
	if o == nil || IsNil(o.FulfillmentState) {
		var ret FulfillmentState
		return ret
	}
	return *o.FulfillmentState
}

// GetFulfillmentStateOk returns a tuple with the FulfillmentState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationTerm) GetFulfillmentStateOk() (*FulfillmentState, bool) {
	if o == nil || IsNil(o.FulfillmentState) {
		return nil, false
	}
	return o.FulfillmentState, true
}

// HasFulfillmentState returns a boolean if a field has been set.
func (o *CancellationTerm) HasFulfillmentState() bool {
	if o != nil && !IsNil(o.FulfillmentState) {
		return true
	}

	return false
}

// SetFulfillmentState gets a reference to the given FulfillmentState and assigns it to the FulfillmentState field.
func (o *CancellationTerm) SetFulfillmentState(v FulfillmentState) {
	o.FulfillmentState = &v
}

// GetReasonRequired returns the ReasonRequired field value if set, zero value otherwise.
func (o *CancellationTerm) GetReasonRequired() bool {
	if o == nil || IsNil(o.ReasonRequired) {
		var ret bool
		return ret
	}
	return *o.ReasonRequired
}

// GetReasonRequiredOk returns a tuple with the ReasonRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationTerm) GetReasonRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.ReasonRequired) {
		return nil, false
	}
	return o.ReasonRequired, true
}

// HasReasonRequired returns a boolean if a field has been set.
func (o *CancellationTerm) HasReasonRequired() bool {
	if o != nil && !IsNil(o.ReasonRequired) {
		return true
	}

	return false
}

// SetReasonRequired gets a reference to the given bool and assigns it to the ReasonRequired field.
func (o *CancellationTerm) SetReasonRequired(v bool) {
	o.ReasonRequired = &v
}

// GetCancelBy returns the CancelBy field value if set, zero value otherwise.
func (o *CancellationTerm) GetCancelBy() Time {
	if o == nil || IsNil(o.CancelBy) {
		var ret Time
		return ret
	}
	return *o.CancelBy
}

// GetCancelByOk returns a tuple with the CancelBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationTerm) GetCancelByOk() (*Time, bool) {
	if o == nil || IsNil(o.CancelBy) {
		return nil, false
	}
	return o.CancelBy, true
}

// HasCancelBy returns a boolean if a field has been set.
func (o *CancellationTerm) HasCancelBy() bool {
	if o != nil && !IsNil(o.CancelBy) {
		return true
	}

	return false
}

// SetCancelBy gets a reference to the given Time and assigns it to the CancelBy field.
func (o *CancellationTerm) SetCancelBy(v Time) {
	o.CancelBy = &v
}

// GetCancellationFee returns the CancellationFee field value if set, zero value otherwise.
func (o *CancellationTerm) GetCancellationFee() Fee {
	if o == nil || IsNil(o.CancellationFee) {
		var ret Fee
		return ret
	}
	return *o.CancellationFee
}

// GetCancellationFeeOk returns a tuple with the CancellationFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationTerm) GetCancellationFeeOk() (*Fee, bool) {
	if o == nil || IsNil(o.CancellationFee) {
		return nil, false
	}
	return o.CancellationFee, true
}

// HasCancellationFee returns a boolean if a field has been set.
func (o *CancellationTerm) HasCancellationFee() bool {
	if o != nil && !IsNil(o.CancellationFee) {
		return true
	}

	return false
}

// SetCancellationFee gets a reference to the given Fee and assigns it to the CancellationFee field.
func (o *CancellationTerm) SetCancellationFee(v Fee) {
	o.CancellationFee = &v
}

// GetXinput returns the Xinput field value if set, zero value otherwise.
func (o *CancellationTerm) GetXinput() XInput {
	if o == nil || IsNil(o.Xinput) {
		var ret XInput
		return ret
	}
	return *o.Xinput
}

// GetXinputOk returns a tuple with the Xinput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationTerm) GetXinputOk() (*XInput, bool) {
	if o == nil || IsNil(o.Xinput) {
		return nil, false
	}
	return o.Xinput, true
}

// HasXinput returns a boolean if a field has been set.
func (o *CancellationTerm) HasXinput() bool {
	if o != nil && !IsNil(o.Xinput) {
		return true
	}

	return false
}

// SetXinput gets a reference to the given XInput and assigns it to the Xinput field.
func (o *CancellationTerm) SetXinput(v XInput) {
	o.Xinput = &v
}

// GetExternalRef returns the ExternalRef field value if set, zero value otherwise.
func (o *CancellationTerm) GetExternalRef() MediaFile {
	if o == nil || IsNil(o.ExternalRef) {
		var ret MediaFile
		return ret
	}
	return *o.ExternalRef
}

// GetExternalRefOk returns a tuple with the ExternalRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationTerm) GetExternalRefOk() (*MediaFile, bool) {
	if o == nil || IsNil(o.ExternalRef) {
		return nil, false
	}
	return o.ExternalRef, true
}

// HasExternalRef returns a boolean if a field has been set.
func (o *CancellationTerm) HasExternalRef() bool {
	if o != nil && !IsNil(o.ExternalRef) {
		return true
	}

	return false
}

// SetExternalRef gets a reference to the given MediaFile and assigns it to the ExternalRef field.
func (o *CancellationTerm) SetExternalRef(v MediaFile) {
	o.ExternalRef = &v
}

func (o CancellationTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancellationTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FulfillmentState) {
		toSerialize["fulfillment_state"] = o.FulfillmentState
	}
	if !IsNil(o.ReasonRequired) {
		toSerialize["reason_required"] = o.ReasonRequired
	}
	if !IsNil(o.CancelBy) {
		toSerialize["cancel_by"] = o.CancelBy
	}
	if !IsNil(o.CancellationFee) {
		toSerialize["cancellation_fee"] = o.CancellationFee
	}
	if !IsNil(o.Xinput) {
		toSerialize["xinput"] = o.Xinput
	}
	if !IsNil(o.ExternalRef) {
		toSerialize["external_ref"] = o.ExternalRef
	}
	return toSerialize, nil
}

type NullableCancellationTerm struct {
	value *CancellationTerm
	isSet bool
}

func (v NullableCancellationTerm) Get() *CancellationTerm {
	return v.value
}

func (v *NullableCancellationTerm) Set(val *CancellationTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationTerm(val *CancellationTerm) *NullableCancellationTerm {
	return &NullableCancellationTerm{value: val, isSet: true}
}

func (v NullableCancellationTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


