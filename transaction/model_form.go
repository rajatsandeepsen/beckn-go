/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Form type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Form{}

// Form Describes a form
type Form struct {
	// The URL from where the form can be fetched. The content fetched from the url must be processed as per the mime_type specified in this object. Once fetched, the rendering platform can choosed to render the form as-is as an embeddable element; or process it further to blend with the theme of the application. In case the interface is non-visual, the the render can process the form data and reproduce it as per the standard specified in the form.
	Url *string `json:"url,omitempty"`
	// The form submission data
	Data map[string]string `json:"data,omitempty"`
	// This field indicates the nature and format of the form received by querying the url. MIME types are defined and standardized in IETF's RFC 6838.
	MimeType *string `json:"mime_type,omitempty"`
	SubmissionId *string `json:"submission_id,omitempty"`
}

// NewForm instantiates a new Form object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForm() *Form {
	this := Form{}
	return &this
}

// NewFormWithDefaults instantiates a new Form object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormWithDefaults() *Form {
	this := Form{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Form) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Form) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Form) SetUrl(v string) {
	o.Url = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Form) GetData() map[string]string {
	if o == nil || IsNil(o.Data) {
		var ret map[string]string
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetDataOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]string{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Form) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]string and assigns it to the Data field.
func (o *Form) SetData(v map[string]string) {
	o.Data = v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *Form) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *Form) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *Form) SetMimeType(v string) {
	o.MimeType = &v
}

// GetSubmissionId returns the SubmissionId field value if set, zero value otherwise.
func (o *Form) GetSubmissionId() string {
	if o == nil || IsNil(o.SubmissionId) {
		var ret string
		return ret
	}
	return *o.SubmissionId
}

// GetSubmissionIdOk returns a tuple with the SubmissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetSubmissionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubmissionId) {
		return nil, false
	}
	return o.SubmissionId, true
}

// HasSubmissionId returns a boolean if a field has been set.
func (o *Form) HasSubmissionId() bool {
	if o != nil && !IsNil(o.SubmissionId) {
		return true
	}

	return false
}

// SetSubmissionId gets a reference to the given string and assigns it to the SubmissionId field.
func (o *Form) SetSubmissionId(v string) {
	o.SubmissionId = &v
}

func (o Form) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Form) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.MimeType) {
		toSerialize["mime_type"] = o.MimeType
	}
	if !IsNil(o.SubmissionId) {
		toSerialize["submission_id"] = o.SubmissionId
	}
	return toSerialize, nil
}

type NullableForm struct {
	value *Form
	isSet bool
}

func (v NullableForm) Get() *Form {
	return v.value
}

func (v *NullableForm) Set(val *Form) {
	v.value = val
	v.isSet = true
}

func (v NullableForm) IsSet() bool {
	return v.isSet
}

func (v *NullableForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForm(val *Form) *NullableForm {
	return &NullableForm{value: val, isSet: true}
}

func (v NullableForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


