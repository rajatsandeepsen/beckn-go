/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"time"
)

// checks if the Schedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schedule{}

// Schedule Describes schedule as a repeating time period used to describe a regularly recurring event. At a minimum a schedule will specify frequency which describes the interval between occurrences of the event. Additional information can be provided to specify the schedule more precisely. This includes identifying the timestamps(s) of when the event will take place. Schedules may also have holidays to exclude a specific day from the schedule.<br>This has properties like frequency, holidays, times
type Schedule struct {
	// Describes duration as per ISO8601 format
	Frequency *string `json:"frequency,omitempty"`
	Holidays []time.Time `json:"holidays,omitempty"`
	Times []time.Time `json:"times,omitempty"`
}

// NewSchedule instantiates a new Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedule() *Schedule {
	this := Schedule{}
	return &this
}

// NewScheduleWithDefaults instantiates a new Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleWithDefaults() *Schedule {
	this := Schedule{}
	return &this
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *Schedule) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *Schedule) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *Schedule) SetFrequency(v string) {
	o.Frequency = &v
}

// GetHolidays returns the Holidays field value if set, zero value otherwise.
func (o *Schedule) GetHolidays() []time.Time {
	if o == nil || IsNil(o.Holidays) {
		var ret []time.Time
		return ret
	}
	return o.Holidays
}

// GetHolidaysOk returns a tuple with the Holidays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetHolidaysOk() ([]time.Time, bool) {
	if o == nil || IsNil(o.Holidays) {
		return nil, false
	}
	return o.Holidays, true
}

// HasHolidays returns a boolean if a field has been set.
func (o *Schedule) HasHolidays() bool {
	if o != nil && !IsNil(o.Holidays) {
		return true
	}

	return false
}

// SetHolidays gets a reference to the given []time.Time and assigns it to the Holidays field.
func (o *Schedule) SetHolidays(v []time.Time) {
	o.Holidays = v
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *Schedule) GetTimes() []time.Time {
	if o == nil || IsNil(o.Times) {
		var ret []time.Time
		return ret
	}
	return o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetTimesOk() ([]time.Time, bool) {
	if o == nil || IsNil(o.Times) {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *Schedule) HasTimes() bool {
	if o != nil && !IsNil(o.Times) {
		return true
	}

	return false
}

// SetTimes gets a reference to the given []time.Time and assigns it to the Times field.
func (o *Schedule) SetTimes(v []time.Time) {
	o.Times = v
}

func (o Schedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.Holidays) {
		toSerialize["holidays"] = o.Holidays
	}
	if !IsNil(o.Times) {
		toSerialize["times"] = o.Times
	}
	return toSerialize, nil
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


