/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"time"
)

// checks if the Provider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Provider{}

// Provider Describes the catalog of a business.
type Provider struct {
	// Id of the provider
	Id *string `json:"id,omitempty"`
	Descriptor *Descriptor `json:"descriptor,omitempty"`
	// Category Id of the provider at the BPP-level catalog
	CategoryId *string `json:"category_id,omitempty"`
	// Rating value given to the object. This can be a single value or can also contain an inequality operator like gt, gte, lt, lte. This can also contain an inequality expression containing logical operators like && and ||.
	Rating *string `json:"rating,omitempty"`
	Time *Time `json:"time,omitempty"`
	Categories []Category `json:"categories,omitempty"`
	Fulfillments []Fulfillment `json:"fulfillments,omitempty"`
	Payments []Payment `json:"payments,omitempty"`
	Locations []Location `json:"locations,omitempty"`
	Offers []Offer `json:"offers,omitempty"`
	Items []Item `json:"items,omitempty"`
	// Time after which catalog has to be refreshed
	Exp *time.Time `json:"exp,omitempty"`
	// Whether this provider can be rated or not
	Rateable *bool `json:"rateable,omitempty"`
	// The time-to-live in seconds, for this object. This can be overriden at deeper levels. A value of -1 indicates that this object is not cacheable.
	Ttl *int32 `json:"ttl,omitempty"`
	Tags []TagGroup `json:"tags,omitempty"`
}

// NewProvider instantiates a new Provider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvider() *Provider {
	this := Provider{}
	return &this
}

// NewProviderWithDefaults instantiates a new Provider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderWithDefaults() *Provider {
	this := Provider{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Provider) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Provider) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Provider) SetId(v string) {
	o.Id = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *Provider) GetDescriptor() Descriptor {
	if o == nil || IsNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *Provider) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *Provider) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *Provider) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *Provider) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *Provider) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *Provider) GetRating() string {
	if o == nil || IsNil(o.Rating) {
		var ret string
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetRatingOk() (*string, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *Provider) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given string and assigns it to the Rating field.
func (o *Provider) SetRating(v string) {
	o.Rating = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Provider) GetTime() Time {
	if o == nil || IsNil(o.Time) {
		var ret Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Provider) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given Time and assigns it to the Time field.
func (o *Provider) SetTime(v Time) {
	o.Time = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Provider) GetCategories() []Category {
	if o == nil || IsNil(o.Categories) {
		var ret []Category
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetCategoriesOk() ([]Category, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Provider) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *Provider) SetCategories(v []Category) {
	o.Categories = v
}

// GetFulfillments returns the Fulfillments field value if set, zero value otherwise.
func (o *Provider) GetFulfillments() []Fulfillment {
	if o == nil || IsNil(o.Fulfillments) {
		var ret []Fulfillment
		return ret
	}
	return o.Fulfillments
}

// GetFulfillmentsOk returns a tuple with the Fulfillments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetFulfillmentsOk() ([]Fulfillment, bool) {
	if o == nil || IsNil(o.Fulfillments) {
		return nil, false
	}
	return o.Fulfillments, true
}

// HasFulfillments returns a boolean if a field has been set.
func (o *Provider) HasFulfillments() bool {
	if o != nil && !IsNil(o.Fulfillments) {
		return true
	}

	return false
}

// SetFulfillments gets a reference to the given []Fulfillment and assigns it to the Fulfillments field.
func (o *Provider) SetFulfillments(v []Fulfillment) {
	o.Fulfillments = v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *Provider) GetPayments() []Payment {
	if o == nil || IsNil(o.Payments) {
		var ret []Payment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetPaymentsOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *Provider) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []Payment and assigns it to the Payments field.
func (o *Provider) SetPayments(v []Payment) {
	o.Payments = v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *Provider) GetLocations() []Location {
	if o == nil || IsNil(o.Locations) {
		var ret []Location
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetLocationsOk() ([]Location, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *Provider) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []Location and assigns it to the Locations field.
func (o *Provider) SetLocations(v []Location) {
	o.Locations = v
}

// GetOffers returns the Offers field value if set, zero value otherwise.
func (o *Provider) GetOffers() []Offer {
	if o == nil || IsNil(o.Offers) {
		var ret []Offer
		return ret
	}
	return o.Offers
}

// GetOffersOk returns a tuple with the Offers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetOffersOk() ([]Offer, bool) {
	if o == nil || IsNil(o.Offers) {
		return nil, false
	}
	return o.Offers, true
}

// HasOffers returns a boolean if a field has been set.
func (o *Provider) HasOffers() bool {
	if o != nil && !IsNil(o.Offers) {
		return true
	}

	return false
}

// SetOffers gets a reference to the given []Offer and assigns it to the Offers field.
func (o *Provider) SetOffers(v []Offer) {
	o.Offers = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Provider) GetItems() []Item {
	if o == nil || IsNil(o.Items) {
		var ret []Item
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetItemsOk() ([]Item, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Provider) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Item and assigns it to the Items field.
func (o *Provider) SetItems(v []Item) {
	o.Items = v
}

// GetExp returns the Exp field value if set, zero value otherwise.
func (o *Provider) GetExp() time.Time {
	if o == nil || IsNil(o.Exp) {
		var ret time.Time
		return ret
	}
	return *o.Exp
}

// GetExpOk returns a tuple with the Exp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetExpOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Exp) {
		return nil, false
	}
	return o.Exp, true
}

// HasExp returns a boolean if a field has been set.
func (o *Provider) HasExp() bool {
	if o != nil && !IsNil(o.Exp) {
		return true
	}

	return false
}

// SetExp gets a reference to the given time.Time and assigns it to the Exp field.
func (o *Provider) SetExp(v time.Time) {
	o.Exp = &v
}

// GetRateable returns the Rateable field value if set, zero value otherwise.
func (o *Provider) GetRateable() bool {
	if o == nil || IsNil(o.Rateable) {
		var ret bool
		return ret
	}
	return *o.Rateable
}

// GetRateableOk returns a tuple with the Rateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetRateableOk() (*bool, bool) {
	if o == nil || IsNil(o.Rateable) {
		return nil, false
	}
	return o.Rateable, true
}

// HasRateable returns a boolean if a field has been set.
func (o *Provider) HasRateable() bool {
	if o != nil && !IsNil(o.Rateable) {
		return true
	}

	return false
}

// SetRateable gets a reference to the given bool and assigns it to the Rateable field.
func (o *Provider) SetRateable(v bool) {
	o.Rateable = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Provider) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Provider) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *Provider) SetTtl(v int32) {
	o.Ttl = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Provider) GetTags() []TagGroup {
	if o == nil || IsNil(o.Tags) {
		var ret []TagGroup
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetTagsOk() ([]TagGroup, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Provider) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagGroup and assigns it to the Tags field.
func (o *Provider) SetTags(v []TagGroup) {
	o.Tags = v
}

func (o Provider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Provider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Fulfillments) {
		toSerialize["fulfillments"] = o.Fulfillments
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	if !IsNil(o.Offers) {
		toSerialize["offers"] = o.Offers
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Exp) {
		toSerialize["exp"] = o.Exp
	}
	if !IsNil(o.Rateable) {
		toSerialize["rateable"] = o.Rateable
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableProvider struct {
	value *Provider
	isSet bool
}

func (v NullableProvider) Get() *Provider {
	return v.value
}

func (v *NullableProvider) Set(val *Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvider(val *Provider) *NullableProvider {
	return &NullableProvider{value: val, isSet: true}
}

func (v NullableProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


