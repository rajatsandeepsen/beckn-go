/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the ItemQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemQuantity{}

// ItemQuantity Describes the count or amount of an item
type ItemQuantity struct {
	Allocated *ItemQuantityAllocated `json:"allocated,omitempty"`
	Available *ItemQuantityAvailable `json:"available,omitempty"`
	Maximum *ItemQuantityMaximum `json:"maximum,omitempty"`
	Minimum *ItemQuantityMinimum `json:"minimum,omitempty"`
	Selected *ItemQuantitySelected `json:"selected,omitempty"`
	Unitized *ItemQuantityUnitized `json:"unitized,omitempty"`
}

// NewItemQuantity instantiates a new ItemQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemQuantity() *ItemQuantity {
	this := ItemQuantity{}
	return &this
}

// NewItemQuantityWithDefaults instantiates a new ItemQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemQuantityWithDefaults() *ItemQuantity {
	this := ItemQuantity{}
	return &this
}

// GetAllocated returns the Allocated field value if set, zero value otherwise.
func (o *ItemQuantity) GetAllocated() ItemQuantityAllocated {
	if o == nil || IsNil(o.Allocated) {
		var ret ItemQuantityAllocated
		return ret
	}
	return *o.Allocated
}

// GetAllocatedOk returns a tuple with the Allocated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetAllocatedOk() (*ItemQuantityAllocated, bool) {
	if o == nil || IsNil(o.Allocated) {
		return nil, false
	}
	return o.Allocated, true
}

// HasAllocated returns a boolean if a field has been set.
func (o *ItemQuantity) HasAllocated() bool {
	if o != nil && !IsNil(o.Allocated) {
		return true
	}

	return false
}

// SetAllocated gets a reference to the given ItemQuantityAllocated and assigns it to the Allocated field.
func (o *ItemQuantity) SetAllocated(v ItemQuantityAllocated) {
	o.Allocated = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *ItemQuantity) GetAvailable() ItemQuantityAvailable {
	if o == nil || IsNil(o.Available) {
		var ret ItemQuantityAvailable
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetAvailableOk() (*ItemQuantityAvailable, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *ItemQuantity) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given ItemQuantityAvailable and assigns it to the Available field.
func (o *ItemQuantity) SetAvailable(v ItemQuantityAvailable) {
	o.Available = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *ItemQuantity) GetMaximum() ItemQuantityMaximum {
	if o == nil || IsNil(o.Maximum) {
		var ret ItemQuantityMaximum
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetMaximumOk() (*ItemQuantityMaximum, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *ItemQuantity) HasMaximum() bool {
	if o != nil && !IsNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given ItemQuantityMaximum and assigns it to the Maximum field.
func (o *ItemQuantity) SetMaximum(v ItemQuantityMaximum) {
	o.Maximum = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *ItemQuantity) GetMinimum() ItemQuantityMinimum {
	if o == nil || IsNil(o.Minimum) {
		var ret ItemQuantityMinimum
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetMinimumOk() (*ItemQuantityMinimum, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *ItemQuantity) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given ItemQuantityMinimum and assigns it to the Minimum field.
func (o *ItemQuantity) SetMinimum(v ItemQuantityMinimum) {
	o.Minimum = &v
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *ItemQuantity) GetSelected() ItemQuantitySelected {
	if o == nil || IsNil(o.Selected) {
		var ret ItemQuantitySelected
		return ret
	}
	return *o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetSelectedOk() (*ItemQuantitySelected, bool) {
	if o == nil || IsNil(o.Selected) {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *ItemQuantity) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given ItemQuantitySelected and assigns it to the Selected field.
func (o *ItemQuantity) SetSelected(v ItemQuantitySelected) {
	o.Selected = &v
}

// GetUnitized returns the Unitized field value if set, zero value otherwise.
func (o *ItemQuantity) GetUnitized() ItemQuantityUnitized {
	if o == nil || IsNil(o.Unitized) {
		var ret ItemQuantityUnitized
		return ret
	}
	return *o.Unitized
}

// GetUnitizedOk returns a tuple with the Unitized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetUnitizedOk() (*ItemQuantityUnitized, bool) {
	if o == nil || IsNil(o.Unitized) {
		return nil, false
	}
	return o.Unitized, true
}

// HasUnitized returns a boolean if a field has been set.
func (o *ItemQuantity) HasUnitized() bool {
	if o != nil && !IsNil(o.Unitized) {
		return true
	}

	return false
}

// SetUnitized gets a reference to the given ItemQuantityUnitized and assigns it to the Unitized field.
func (o *ItemQuantity) SetUnitized(v ItemQuantityUnitized) {
	o.Unitized = &v
}

func (o ItemQuantity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allocated) {
		toSerialize["allocated"] = o.Allocated
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}
	if !IsNil(o.Unitized) {
		toSerialize["unitized"] = o.Unitized
	}
	return toSerialize, nil
}

type NullableItemQuantity struct {
	value *ItemQuantity
	isSet bool
}

func (v NullableItemQuantity) Get() *ItemQuantity {
	return v.value
}

func (v *NullableItemQuantity) Set(val *ItemQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableItemQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableItemQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemQuantity(val *ItemQuantity) *NullableItemQuantity {
	return &NullableItemQuantity{value: val, isSet: true}
}

func (v NullableItemQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


