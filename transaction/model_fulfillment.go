/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Fulfillment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fulfillment{}

// Fulfillment Describes how a an order will be rendered/fulfilled to the end-customer
type Fulfillment struct {
	// Unique reference ID to the fulfillment of an order
	Id *string `json:"id,omitempty"`
	// A code that describes the mode of fulfillment. This is typically set when there are multiple ways an order can be fulfilled. For example, a retail order can be fulfilled either via store pickup or a home delivery. Similarly, a medical consultation can be provided either in-person or via tele-consultation. The network policy must publish standard fulfillment type codes for the different modes of fulfillment.
	Type *string `json:"type,omitempty"`
	// Whether the fulfillment can be rated or not
	Rateable *bool `json:"rateable,omitempty"`
	// The rating value of the fulfullment service.
	Rating *string `json:"rating,omitempty"`
	// The current state of fulfillment. The BPP must set this value whenever the state of the order fulfillment changes and fire an unsolicited `on_status` call.
	State *FulfillmentState `json:"state,omitempty"`
	// Indicates whether the fulfillment allows tracking
	Tracking *bool `json:"tracking,omitempty"`
	// The person that will ultimately receive the order
	Customer *Customer `json:"customer,omitempty"`
	// The agent that is currently handling the fulfillment of the order
	Agent *Agent `json:"agent,omitempty"`
	Contact *Contact `json:"contact,omitempty"`
	Vehicle *Vehicle `json:"vehicle,omitempty"`
	// The list of logical stops encountered during the fulfillment of an order.
	Stops []Stop `json:"stops,omitempty"`
	// The physical path taken by the agent that can be rendered on a map. The allowed format of this property can be set by the network.
	Path *string `json:"path,omitempty"`
	Tags []TagGroup `json:"tags,omitempty"`
}

// NewFulfillment instantiates a new Fulfillment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFulfillment() *Fulfillment {
	this := Fulfillment{}
	var tracking bool = false
	this.Tracking = &tracking
	return &this
}

// NewFulfillmentWithDefaults instantiates a new Fulfillment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFulfillmentWithDefaults() *Fulfillment {
	this := Fulfillment{}
	var tracking bool = false
	this.Tracking = &tracking
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Fulfillment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Fulfillment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Fulfillment) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Fulfillment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Fulfillment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Fulfillment) SetType(v string) {
	o.Type = &v
}

// GetRateable returns the Rateable field value if set, zero value otherwise.
func (o *Fulfillment) GetRateable() bool {
	if o == nil || IsNil(o.Rateable) {
		var ret bool
		return ret
	}
	return *o.Rateable
}

// GetRateableOk returns a tuple with the Rateable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetRateableOk() (*bool, bool) {
	if o == nil || IsNil(o.Rateable) {
		return nil, false
	}
	return o.Rateable, true
}

// HasRateable returns a boolean if a field has been set.
func (o *Fulfillment) HasRateable() bool {
	if o != nil && !IsNil(o.Rateable) {
		return true
	}

	return false
}

// SetRateable gets a reference to the given bool and assigns it to the Rateable field.
func (o *Fulfillment) SetRateable(v bool) {
	o.Rateable = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *Fulfillment) GetRating() string {
	if o == nil || IsNil(o.Rating) {
		var ret string
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetRatingOk() (*string, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *Fulfillment) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given string and assigns it to the Rating field.
func (o *Fulfillment) SetRating(v string) {
	o.Rating = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Fulfillment) GetState() FulfillmentState {
	if o == nil || IsNil(o.State) {
		var ret FulfillmentState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetStateOk() (*FulfillmentState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Fulfillment) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given FulfillmentState and assigns it to the State field.
func (o *Fulfillment) SetState(v FulfillmentState) {
	o.State = &v
}

// GetTracking returns the Tracking field value if set, zero value otherwise.
func (o *Fulfillment) GetTracking() bool {
	if o == nil || IsNil(o.Tracking) {
		var ret bool
		return ret
	}
	return *o.Tracking
}

// GetTrackingOk returns a tuple with the Tracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetTrackingOk() (*bool, bool) {
	if o == nil || IsNil(o.Tracking) {
		return nil, false
	}
	return o.Tracking, true
}

// HasTracking returns a boolean if a field has been set.
func (o *Fulfillment) HasTracking() bool {
	if o != nil && !IsNil(o.Tracking) {
		return true
	}

	return false
}

// SetTracking gets a reference to the given bool and assigns it to the Tracking field.
func (o *Fulfillment) SetTracking(v bool) {
	o.Tracking = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *Fulfillment) GetCustomer() Customer {
	if o == nil || IsNil(o.Customer) {
		var ret Customer
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetCustomerOk() (*Customer, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *Fulfillment) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given Customer and assigns it to the Customer field.
func (o *Fulfillment) SetCustomer(v Customer) {
	o.Customer = &v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *Fulfillment) GetAgent() Agent {
	if o == nil || IsNil(o.Agent) {
		var ret Agent
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetAgentOk() (*Agent, bool) {
	if o == nil || IsNil(o.Agent) {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *Fulfillment) HasAgent() bool {
	if o != nil && !IsNil(o.Agent) {
		return true
	}

	return false
}

// SetAgent gets a reference to the given Agent and assigns it to the Agent field.
func (o *Fulfillment) SetAgent(v Agent) {
	o.Agent = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Fulfillment) GetContact() Contact {
	if o == nil || IsNil(o.Contact) {
		var ret Contact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Fulfillment) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given Contact and assigns it to the Contact field.
func (o *Fulfillment) SetContact(v Contact) {
	o.Contact = &v
}

// GetVehicle returns the Vehicle field value if set, zero value otherwise.
func (o *Fulfillment) GetVehicle() Vehicle {
	if o == nil || IsNil(o.Vehicle) {
		var ret Vehicle
		return ret
	}
	return *o.Vehicle
}

// GetVehicleOk returns a tuple with the Vehicle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetVehicleOk() (*Vehicle, bool) {
	if o == nil || IsNil(o.Vehicle) {
		return nil, false
	}
	return o.Vehicle, true
}

// HasVehicle returns a boolean if a field has been set.
func (o *Fulfillment) HasVehicle() bool {
	if o != nil && !IsNil(o.Vehicle) {
		return true
	}

	return false
}

// SetVehicle gets a reference to the given Vehicle and assigns it to the Vehicle field.
func (o *Fulfillment) SetVehicle(v Vehicle) {
	o.Vehicle = &v
}

// GetStops returns the Stops field value if set, zero value otherwise.
func (o *Fulfillment) GetStops() []Stop {
	if o == nil || IsNil(o.Stops) {
		var ret []Stop
		return ret
	}
	return o.Stops
}

// GetStopsOk returns a tuple with the Stops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetStopsOk() ([]Stop, bool) {
	if o == nil || IsNil(o.Stops) {
		return nil, false
	}
	return o.Stops, true
}

// HasStops returns a boolean if a field has been set.
func (o *Fulfillment) HasStops() bool {
	if o != nil && !IsNil(o.Stops) {
		return true
	}

	return false
}

// SetStops gets a reference to the given []Stop and assigns it to the Stops field.
func (o *Fulfillment) SetStops(v []Stop) {
	o.Stops = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Fulfillment) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Fulfillment) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Fulfillment) SetPath(v string) {
	o.Path = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Fulfillment) GetTags() []TagGroup {
	if o == nil || IsNil(o.Tags) {
		var ret []TagGroup
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Fulfillment) GetTagsOk() ([]TagGroup, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Fulfillment) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagGroup and assigns it to the Tags field.
func (o *Fulfillment) SetTags(v []TagGroup) {
	o.Tags = v
}

func (o Fulfillment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fulfillment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Rateable) {
		toSerialize["rateable"] = o.Rateable
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Tracking) {
		toSerialize["tracking"] = o.Tracking
	}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !IsNil(o.Agent) {
		toSerialize["agent"] = o.Agent
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Vehicle) {
		toSerialize["vehicle"] = o.Vehicle
	}
	if !IsNil(o.Stops) {
		toSerialize["stops"] = o.Stops
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableFulfillment struct {
	value *Fulfillment
	isSet bool
}

func (v NullableFulfillment) Get() *Fulfillment {
	return v.value
}

func (v *NullableFulfillment) Set(val *Fulfillment) {
	v.value = val
	v.isSet = true
}

func (v NullableFulfillment) IsSet() bool {
	return v.isSet
}

func (v *NullableFulfillment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFulfillment(val *Fulfillment) *NullableFulfillment {
	return &NullableFulfillment{value: val, isSet: true}
}

func (v NullableFulfillment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFulfillment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


