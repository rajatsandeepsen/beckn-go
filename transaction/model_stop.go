/*
Beckn Protocol Core

Beckn Core Transaction API specification

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transaction

import (
	"encoding/json"
)

// checks if the Stop type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stop{}

// Stop A logical point in space and time during the fulfillment of an order.
type Stop struct {
	Id *string `json:"id,omitempty"`
	ParentStopId *string `json:"parent_stop_id,omitempty"`
	// Location of the stop
	Location *Location `json:"location,omitempty"`
	// The type of stop. Allowed values of this property can be defined by the network policy.
	Type *string `json:"type,omitempty"`
	// Timings applicable at the stop.
	Time *Time `json:"time,omitempty"`
	// Instructions that need to be followed at the stop
	Instructions *Descriptor `json:"instructions,omitempty"`
	// Contact details of the stop
	Contact *Contact `json:"contact,omitempty"`
	// The details of the person present at the stop
	Person *Person `json:"person,omitempty"`
	Authorization *Authorization `json:"authorization,omitempty"`
}

// NewStop instantiates a new Stop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStop() *Stop {
	this := Stop{}
	return &this
}

// NewStopWithDefaults instantiates a new Stop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopWithDefaults() *Stop {
	this := Stop{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Stop) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Stop) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Stop) SetId(v string) {
	o.Id = &v
}

// GetParentStopId returns the ParentStopId field value if set, zero value otherwise.
func (o *Stop) GetParentStopId() string {
	if o == nil || IsNil(o.ParentStopId) {
		var ret string
		return ret
	}
	return *o.ParentStopId
}

// GetParentStopIdOk returns a tuple with the ParentStopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetParentStopIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentStopId) {
		return nil, false
	}
	return o.ParentStopId, true
}

// HasParentStopId returns a boolean if a field has been set.
func (o *Stop) HasParentStopId() bool {
	if o != nil && !IsNil(o.ParentStopId) {
		return true
	}

	return false
}

// SetParentStopId gets a reference to the given string and assigns it to the ParentStopId field.
func (o *Stop) SetParentStopId(v string) {
	o.ParentStopId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Stop) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Stop) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *Stop) SetLocation(v Location) {
	o.Location = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Stop) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Stop) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Stop) SetType(v string) {
	o.Type = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Stop) GetTime() Time {
	if o == nil || IsNil(o.Time) {
		var ret Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Stop) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given Time and assigns it to the Time field.
func (o *Stop) SetTime(v Time) {
	o.Time = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *Stop) GetInstructions() Descriptor {
	if o == nil || IsNil(o.Instructions) {
		var ret Descriptor
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetInstructionsOk() (*Descriptor, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *Stop) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given Descriptor and assigns it to the Instructions field.
func (o *Stop) SetInstructions(v Descriptor) {
	o.Instructions = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Stop) GetContact() Contact {
	if o == nil || IsNil(o.Contact) {
		var ret Contact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Stop) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given Contact and assigns it to the Contact field.
func (o *Stop) SetContact(v Contact) {
	o.Contact = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *Stop) GetPerson() Person {
	if o == nil || IsNil(o.Person) {
		var ret Person
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetPersonOk() (*Person, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *Stop) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given Person and assigns it to the Person field.
func (o *Stop) SetPerson(v Person) {
	o.Person = &v
}

// GetAuthorization returns the Authorization field value if set, zero value otherwise.
func (o *Stop) GetAuthorization() Authorization {
	if o == nil || IsNil(o.Authorization) {
		var ret Authorization
		return ret
	}
	return *o.Authorization
}

// GetAuthorizationOk returns a tuple with the Authorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetAuthorizationOk() (*Authorization, bool) {
	if o == nil || IsNil(o.Authorization) {
		return nil, false
	}
	return o.Authorization, true
}

// HasAuthorization returns a boolean if a field has been set.
func (o *Stop) HasAuthorization() bool {
	if o != nil && !IsNil(o.Authorization) {
		return true
	}

	return false
}

// SetAuthorization gets a reference to the given Authorization and assigns it to the Authorization field.
func (o *Stop) SetAuthorization(v Authorization) {
	o.Authorization = &v
}

func (o Stop) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stop) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParentStopId) {
		toSerialize["parent_stop_id"] = o.ParentStopId
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if !IsNil(o.Authorization) {
		toSerialize["authorization"] = o.Authorization
	}
	return toSerialize, nil
}

type NullableStop struct {
	value *Stop
	isSet bool
}

func (v NullableStop) Get() *Stop {
	return v.value
}

func (v *NullableStop) Set(val *Stop) {
	v.value = val
	v.isSet = true
}

func (v NullableStop) IsSet() bool {
	return v.isSet
}

func (v *NullableStop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStop(val *Stop) *NullableStop {
	return &NullableStop{value: val, isSet: true}
}

func (v NullableStop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


